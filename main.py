# –§–∞–π–ª: main.py

import asyncio
import json
import websockets
from pymax import MaxClient, Message

from core.config import config, ALIASES, PHONE
from core.loader import load_all_modules, COMMANDS, MODULE_COMMANDS
from core.api import API, log_critical_error

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
if not PHONE:
    print("!!! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 'maxli_config.json'. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit()
    
client = MaxClient(phone=PHONE, work_dir="pymax_session")
api = API(client, config)

# --- –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ---
@client.on_message()
async def message_handler(message: Message):
    # chat_id —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π PyMax
    from core.api import _append_log
    if not hasattr(message, 'chat_id') or message.chat_id is None:
        _append_log(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ –∏–º–µ–µ—Ç chat_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    _append_log(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ —á–∞—Ç–µ {message.chat_id}")

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)
    from core.api import _append_log
    snippet = (getattr(message, 'text', '') or '')[:80]
    full_text = getattr(message, 'text', '') or ''
    _append_log(f"[msg] {snippet}")
    _append_log(f"[msg-full] {full_text}")

    # –û–±–Ω–æ–≤–ª—è–µ–º last_known_chat_id –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ "–ü—Ä—Ä"
    api.update_last_known_chat_id(message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    is_own = False
    if hasattr(client, 'me') and client.me and hasattr(message, 'sender'):
        is_own = (message.sender == client.me.id)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—Å –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞
    current_prefix = config.get('prefix', '.')
    if is_own and message.text and current_prefix and message.text.startswith(current_prefix):
        command_body = message.text[len(current_prefix):]; parts = command_body.split()
        command_name = parts[0].lower(); args = parts[1:]
        resolved_command = ALIASES.get(command_name, command_name)
        handler_info = COMMANDS.get(resolved_command) or MODULE_COMMANDS.get(resolved_command)

        if handler_info:
            handler = handler_info if callable(handler_info) else handler_info['function']
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            _append_log(f"[command] {command_name} | {full_text}")
            try:
                await handler(api, message, args)
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ LOG_BUFFER
                err_text = f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command_name}: {e} | –°–æ–æ–±—â–µ–Ω–∏–µ: {full_text}"
                _append_log(err_text)
                await log_critical_error(e, message, client)
                try:
                    await api.edit(message, err_text)
                except Exception:
                    pass
            return  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–æ—Ç—á–µ—Ä—ã –º–æ–¥—É–ª–µ–π
    from core.loader import WATCHERS
    for watcher in WATCHERS:
        try:
            await watcher(api, message)
        except Exception as e:
            _append_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ç—á–µ—Ä–µ: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ç—á–µ—Ä–µ: {e}")


@client.on_start
async def startup():
    api.set_me(client.me)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    from core_modules.restart import check_restart_info
    await check_restart_info(api)
    
    await load_all_modules(api)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
    from core_modules.restart import update_restart_complete
    await update_restart_complete(api)
    
    print(f"–Æ–∑–µ—Ä–±–æ—Ç {api.BOT_NAME} v{api.BOT_VERSION} –∑–∞–ø—É—â–µ–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ client.me –Ω–µ None –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
    if client.me and client.me.names:
        print(f"–í–æ—à–µ–ª –∫–∞–∫: {client.me.names[0].name} ({client.phone})")
    else:
        print(f"–í–æ—à–µ–ª –∫–∞–∫: {client.phone} (–ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)")
    
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyMax —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º chat_id")

if __name__ == "__main__":
    import logging
    log = logging.getLogger("maxli.LOG_BUFFER")
    if not log.hasHandlers():
        handler = logging.StreamHandler()
        formatter = logging.Formatter("%(asctime)s [LOG_BUFFER] %(message)s")
        handler.setFormatter(formatter)
        log.addHandler(handler)
        log.setLevel(logging.INFO)
    print("–ó–∞–ø—É—Å–∫–∞—é —é–∑–µ—Ä–±–æ—Ç–∞...")

    import asyncio
    async def run_with_reconnect():
        while True:
            try:
                await client.start()
            except (asyncio.CancelledError, asyncio.TimeoutError) as e:
                import logging
                logging.getLogger("maxli.LOG_BUFFER").warning(f"[reconnect] [asyncio error] {type(e).__name__}: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(2)
            except Exception as e:
                import logging
                logging.getLogger("maxli.LOG_BUFFER").warning(f"[reconnect] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(2)
            except BaseException as e:
                import logging
                logging.getLogger("maxli.LOG_BUFFER").warning(f"[reconnect] [BaseException] {type(e).__name__}: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(2)
    asyncio.run(run_with_reconnect())
