# –§–∞–π–ª: main.py

import asyncio
import json
import websockets
from pymax import MaxClient, Message

from core.config import config, PREFIX, ALIASES, PHONE
from core.loader import load_all_modules, COMMANDS, MODULE_COMMANDS
from core.api import API, log_critical_error

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
if not PHONE:
    print("!!! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 'maxli_config.json'. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit()
    
client = MaxClient(phone=PHONE, work_dir="pymax_session")
api = API(client, config)

# --- –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ---
@client.on_message()
async def message_handler(message: Message):
    # chat_id —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π PyMax
    if not hasattr(message, 'chat_id') or not message.chat_id:
        print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ –∏–º–µ–µ—Ç chat_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ —á–∞—Ç–µ {message.chat_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º last_known_chat_id –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ "–ü—Ä—Ä"
    api.update_last_known_chat_id(message)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –∏–∑ —Ñ–∞–π–ª–∞ —Ç–µ–ø–µ—Ä—å –≤ —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥–µ load ---

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä—Ä" (—Ç–æ–ª—å–∫–æ –æ—Ç –¥—Ä—É–≥–∏—Ö) ---
    if not api.me or message.sender != api.me.id:
        if message.text and message.text.lower() == "–ø—Ä—Ä":
            if api.last_known_chat_id:
                await client.send_message(chat_id=api.last_known_chat_id, text="–ö—É", notify=True)
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –Ω–∞—Å

    # --- –ï–°–õ–ò –ú–´ –ó–î–ï–°–¨, –ó–ù–ê–ß–ò–¢ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ù–ê–° –ò –≠–¢–û –ö–û–ú–ê–ù–î–ê ---
    if not message.text or (PREFIX and not message.text.startswith(PREFIX)):
        return

    command_body = message.text[len(PREFIX):]; parts = command_body.split()
    command_name = parts[0].lower(); args = parts[1:]
    resolved_command = ALIASES.get(command_name, command_name)
    handler_info = COMMANDS.get(resolved_command) or MODULE_COMMANDS.get(resolved_command)

    if handler_info:
        handler = handler_info if callable(handler_info) else handler_info['function']
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É. API —Å–∞–º–æ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å chat_id –∏ –æ—à–∏–±–∫–∞–º–∏.
        try:
            await handler(api, message, args)
        except Exception as e:
            await log_critical_error(e, message, client)


@client.on_start
async def startup():
    api.set_me(client.me)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    from core_modules.restart import check_restart_info
    await check_restart_info(api)
    
    await load_all_modules(api)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
    from core_modules.restart import update_restart_complete
    await update_restart_complete(api)
    
    print(f"–Æ–∑–µ—Ä–±–æ—Ç {api.BOT_NAME} v{api.BOT_VERSION} –∑–∞–ø—É—â–µ–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ client.me –Ω–µ None –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
    if client.me and client.me.names:
        print(f"–í–æ—à–µ–ª –∫–∞–∫: {client.me.names[0].name} ({client.phone})")
    else:
        print(f"–í–æ—à–µ–ª –∫–∞–∫: {client.phone} (–ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)")
    
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyMax —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º chat_id")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞—é —é–∑–µ—Ä–±–æ—Ç–∞...")
    asyncio.run(client.start())
