import asyncio
import json
from pathlib import Path
import traceback
import aiohttp
import aiofiles

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
BOT_NAME = "Maxli"
BOT_VERSION = "0.3.2" # –ü–æ–≤—ã—à–∞–µ–º –≤–µ—Ä—Å–∏—é
BOT_VERSION_CODE = 33
MODULES_DIR = Path("modules")
LOG_BUFFER = []  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏)

def _append_log(text: str):
    import logging
    try:
        lines = text.splitlines()
        LOG_BUFFER.extend(lines)
        # –¢–∞–∫–∂–µ –ø–∏—à–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        logger = logging.getLogger("maxli.LOG_BUFFER")
        for line in lines:
            logger.info(line)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        max_lines = 5000
        if len(LOG_BUFFER) > max_lines:
            del LOG_BUFFER[: len(LOG_BUFFER) - max_lines]
    except Exception:
        pass

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–£–ü–ï–†-–û–¢–õ–ê–î–ö–ò ---
async def log_critical_error(e, message, client, chat_id=None):
    header = "\n" + "="*50 + "\n" + "!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î–´ !!!"\
        + f"\n–ö–æ–º–∞–Ω–¥–∞: {getattr(message, 'text', '')}"\
        + f"\n–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}\n"
    print(header)
    _append_log(header)
    print("--- JSON –°–û–û–ë–©–ï–ù–ò–Ø, –í–´–ó–í–ê–í–®–ï–ì–û –û–®–ò–ë–ö–£ ---")
    log_message_json(message, "")
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º traceback –≤ –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤
        tb = ''.join(traceback.format_exception(type(e), e, e.__traceback__))
        _append_log(tb)
    except Exception:
        pass
    
    if not chat_id:
        print("--- –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ chat_id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏... ---")
        temp_api_instance = API(client, {})
        temp_api_instance.set_me(client.me)
        chat_id = await temp_api_instance.await_chat_id(message)
        print(f"--- –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ chat_id: {chat_id} ---")
    
    if chat_id:
        try:
            all_convs = client.dialogs + client.chats
            target_chat = next((c for c in all_convs if c.id == chat_id), None)
            if target_chat:
                print("--- JSON –ß–ê–¢–ê/–î–ò–ê–õ–û–ì–ê ---")
                print(json.dumps(target_chat.__dict__, indent=2, default=str))
        except Exception as debug_e:
            print(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {debug_e} !!!")
    else:
        print("--- –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ. ---")
    print("="*50 + "\n")
    
def log_message_json(message, prefix=""):
    if hasattr(message, '__dict__'):
        print(prefix + json.dumps(message.__dict__, indent=2, default=str))
    else:
        print(prefix + str(message))

# --- –ù–ê–® API –ù–ê–î PYMAX ---
class API:
    def __init__(self, client_instance, config_instance):
        self.client = client_instance
        self.config = config_instance
        self.me = None
        self.last_known_chat_id = None # –ü–∞–º—è—Ç—å –¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ "–ü—Ä—Ä"
        self.message_to_chat_cache = {} # –ö—ç—à –¥–ª—è —Å–≤—è–∑–∏ message_id -> chat_id
        self.BOT_NAME = BOT_NAME
        self.BOT_VERSION = BOT_VERSION
        self.BOT_VERSION_CODE = BOT_VERSION_CODE
        # –î–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –ª–æ–≥–æ–≤ –∏–∑ –∏–Ω—Å—Ç–∞–Ω—Å–∞
        self.LOG_BUFFER = LOG_BUFFER

    def set_me(self, me_instance):
        self.me = me_instance
    
    def update_last_known_chat_id(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç '–ø–∞–º—è—Ç—å' –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ '–ü—Ä—Ä')."""
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_known_chat_id –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ "–ü—Ä—Ä"
        if hasattr(self, 'me') and self.me and message.sender != self.me.id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if hasattr(message, 'chat_id') and message.chat_id:
                self.last_known_chat_id = message.chat_id
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω last_known_chat_id: {self.last_known_chat_id}")
            else:
                # Fallback: –∏—â–µ–º –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                self.last_known_chat_id = message.sender
                print(f"‚ö†Ô∏è Fallback: last_known_chat_id <- sender = {self.last_known_chat_id}")

    async def await_chat_id(self, message):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ message.id. 
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chat_id."""
        chat_id = getattr(message, 'chat_id', None)
        if chat_id is not None:
            return chat_id

        msg_id = getattr(message, 'id', None)
        if msg_id is None:
            print(f"‚ö†Ô∏è await_chat_id: –Ω–µ –Ω–∞–π–¥–µ–Ω message.id")
            return None

        print(f"‚ö†Ô∏è await_chat_id: –∂–¥–µ–º chat_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}")
        start_time = asyncio.get_running_loop().time()
        max_wait_time = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        check_interval = 0.5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        while True:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º message –Ω–∞ –Ω–∞–ª–∏—á–∏–µ chat_id (–º–æ–≥–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è)
            if hasattr(message, 'chat_id') and message.chat_id is not None:
                return message.chat_id

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if msg_id in self.message_to_chat_cache:
                return self.message_to_chat_cache[msg_id]

            # 3. –ò—â–µ–º —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
            chats = self.client.dialogs + self.client.chats
            for chat in chats:
                if chat.last_message and getattr(chat.last_message, 'id', None) == msg_id:
                    chat_id = chat.id
                    self.message_to_chat_cache[msg_id] = chat_id  # –ö—ç—à–∏—Ä—É–µ–º
                    print(f"‚úÖ await_chat_id: –Ω–∞–π–¥–µ–Ω chat_id = {chat_id}")
                    return chat_id

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            elapsed_time = asyncio.get_running_loop().time() - start_time
            if elapsed_time >= max_wait_time:
                print(f"‚ö†Ô∏è await_chat_id: —Ç–∞–π–º–∞—É—Ç {max_wait_time} —Å–µ–∫")
                return None

            # 5. –ñ–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            await asyncio.sleep(check_interval)

    async def edit(self, message, text, markdown=False, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. 
        –ï—Å–ª–∏ markdown=True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç markdown-–ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-16 –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º chat_id
        chat_id = await self.await_chat_id(message)
        if chat_id is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None

        msg_id = getattr(message, "id", None)
        if msg_id is None:
            print(f"‚ùå –ù–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None

        notify = kwargs.pop("notify", False)

        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_params = {
                "chat_id": chat_id,
                "message_id": msg_id,
                "notify": notify,
                **kwargs
            }

            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è markdown
            if markdown:
                from pymax.markdown_parser import get_markdown_parser
                parser = get_markdown_parser()
                clean_text, elements = parser.parse(text)
                print(f"üìù Markdown –ø–∞—Ä—Å–∏–Ω–≥: '{text}' -> '{clean_text}' —Å {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                print(f"üîç –≠–ª–µ–º–µ–Ω—Ç—ã: {elements}")

                # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                try:
                    edit_params["text"] = clean_text
                    edit_params["elements"] = elements
                    result = await self.client.edit_message(**edit_params)
                    if result:
                        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                        return result
                except TypeError:
                    print("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–∏—Ö")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏: {e}")

                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                try:
                    del edit_params["elements"]
                    result = await self.client.edit_message(**edit_params)
                    if result:
                        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        return result
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

            # –ï—Å–ª–∏ markdown=False –∏–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å markdown –Ω–µ —É–¥–∞–ª–∏—Å—å
            try:
                edit_params["text"] = text
                result = await self.client.edit_message(**edit_params)
                if result:
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
                    return result
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            if markdown:
                return await self._send_message_with_elements(
                    chat_id=chat_id,
                    text=clean_text,
                    elements=elements,
                    notify=notify,
                    **kwargs
                )
            else:
                return await self.client.send_message(
                    chat_id=chat_id,
                    text=text,
                    notify=notify,
                    **kwargs
                )

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await log_critical_error(e, message, self.client, chat_id)
            return None
            
    async def send(self, chat_id, text, markdown=False, **kwargs):
        notify = kwargs.pop("notify", False)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id (0 - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π ID –¥–ª—è "–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        if chat_id is None:
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id –≤ send: {chat_id}")
            return None

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∞—Ç–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        if chat_id == 0:
            print(f"üîß –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' —Å ID: {chat_id}")
            print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º ID = 0 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'")

        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω markdown, –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
        if markdown:
            from pymax.markdown_parser import get_markdown_parser
            parser = get_markdown_parser()
            clean_text, elements = parser.parse(text)
            print(f"üìù Markdown –ø–∞—Ä—Å–∏–Ω–≥: '{text}' -> '{clean_text}' —Å {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            print(f"üîç –≠–ª–µ–º–µ–Ω—Ç—ã: {elements}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return await self._send_message_with_elements(
                chat_id=chat_id, 
                text=clean_text, 
                elements=elements, 
                notify=notify, 
                **kwargs
            )
        else:
            return await self.client.send_message(
                text=text,
                chat_id=chat_id,
                notify=notify,
                **kwargs
            )
    
    async def _send_message_with_elements(self, chat_id, text, elements, notify=False, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        from pymax.static import Opcode
        from pymax.payloads import SendMessagePayload, SendMessagePayloadMessage
        import time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id
        if chat_id is None:
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id: {chat_id}")
            return None

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —á–∞—Ç {chat_id}")
        print(f"   –¢–µ–∫—Å—Ç: {text}")
        print(f"   –≠–ª–µ–º–µ–Ω—Ç—ã: {elements}")

        # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        message_payload = SendMessagePayloadMessage(
            text=text,
            cid=int(time.time() * 1000),
            elements=elements,
            attaches=[],
            link=None
        )

        payload = SendMessagePayload(
            chat_id=chat_id,
            message=message_payload,
            notify=notify
        ).model_dump(by_alias=True)

        print(f"üîç Payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {payload}")

        data = await self.client._send_and_wait(
            opcode=Opcode.MSG_SEND,
            payload=payload
        )

        print(f"üîç –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")

        if error := data.get("payload", {}).get("error"):
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {error}")
            return None

        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return data

    async def send_file(self, chat_id, file_path, text="", markdown=False, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —á–∞—Ç."""
        try:
            from pathlib import Path
            import aiofiles
            
            file_path = Path(file_path)
            if not file_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            async with aiofiles.open(file_path, 'rb') as f:
                file_content = await f.read()
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_url = await self._get_file_upload_url()
            if not upload_url:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {upload_url}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            file_token = await self._upload_file_to_server(upload_url, file_content, file_path.name)
            if not file_token:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Ç–æ–∫–µ–Ω: {file_token}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–º
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–º...")
            import asyncio
            await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω markdown, –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
            if markdown:
                from pymax.markdown_parser import get_markdown_parser
                parser = get_markdown_parser()
                clean_text, elements = parser.parse(text)
                print(f"üìù Markdown –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ñ–∞–π–ª–∞: '{text}' -> '{clean_text}' —Å {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return await self._send_file_with_elements(
                    chat_id=chat_id,
                    text=clean_text,
                    elements=elements,
                    file_token=file_token,
                    filename=file_path.name,
                    **kwargs
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return await self._send_message_with_file(
                    chat_id=chat_id,
                    text=text,
                    file_token=file_token,
                    filename=file_path.name,
                    **kwargs
                )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None
    
    async def _send_file_with_elements(self, chat_id, text, elements, file_token, filename, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            from pymax.static import Opcode
            from pymax.payloads import SendMessagePayload, SendMessagePayloadMessage
            import time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id
            if chat_id is None:
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id –≤ _send_file_with_elements: {chat_id}")
                return None
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —á–∞—Ç {chat_id}")
            print(f"   –¢–µ–∫—Å—Ç: {text}")
            print(f"   –≠–ª–µ–º–µ–Ω—Ç—ã: {elements}")
            print(f"   –§–∞–π–ª: {filename}")
            
            # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
            if file_token.isdigit():
                # –≠—Ç–æ fileId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ fileId
                attach_data = {
                    "_type": "FILE",
                    "name": filename,
                    "fileId": int(file_token)
                }
                print(f"üîç DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º fileId: {file_token}")
            else:
                # –≠—Ç–æ —Ç–æ–∫–µ–Ω
                attach_data = {
                    "_type": "FILE",
                    "name": filename,
                    "token": file_token
                }
                print(f"üîç DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {file_token}")
            
            # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ —Ñ–∞–π–ª–æ–º
            message_payload = SendMessagePayloadMessage(
                text=text,
                cid=int(time.time() * 1000),
                elements=elements,
                attaches=[attach_data],
                link=None
            )
            
            payload = SendMessagePayload(
                chat_id=chat_id,
                message=message_payload,
                notify=kwargs.get('notify', True)
            ).model_dump(by_alias=True)
            
            print(f"üîç Payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {payload}")
            
            data = await self.client._send_and_wait(
                opcode=Opcode.MSG_SEND,
                payload=payload
            )
            
            print(f"üîç –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")
            
            if error := data.get("payload", {}).get("error"):
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {error}")
                return None
                
            print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None