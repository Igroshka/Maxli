import asyncio
import json
from pathlib import Path
import aiohttp
import aiofiles

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
BOT_NAME = "Maxli"
BOT_VERSION = "0.2.6" # –ü–æ–≤—ã—à–∞–µ–º –≤–µ—Ä—Å–∏—é
BOT_VERSION_CODE = 26
MODULES_DIR = Path("modules")

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–£–ü–ï–†-–û–¢–õ–ê–î–ö–ò ---
async def log_critical_error(e, message, client, chat_id=None):
    print("\n" + "="*50)
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î–´ !!!")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {message.text}")
    print(f"–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
    print("--- JSON –°–û–û–ë–©–ï–ù–ò–Ø, –í–´–ó–í–ê–í–®–ï–ì–û –û–®–ò–ë–ö–£ ---")
    log_message_json(message, "")
    
    if not chat_id:
        print("--- –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ chat_id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏... ---")
        temp_api_instance = API(client, {})
        temp_api_instance.set_me(client.me)
        chat_id = await temp_api_instance.await_chat_id(message)
        print(f"--- –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ chat_id: {chat_id} ---")
    
    if chat_id:
        try:
            all_convs = client.dialogs + client.chats
            target_chat = next((c for c in all_convs if c.id == chat_id), None)
            if target_chat:
                print("--- JSON –ß–ê–¢–ê/–î–ò–ê–õ–û–ì–ê ---")
                print(json.dumps(target_chat.__dict__, indent=2, default=str))
        except Exception as debug_e:
            print(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {debug_e} !!!")
    else:
        print("--- –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ. ---")
    print("="*50 + "\n")
    
def log_message_json(message, prefix=""):
    if hasattr(message, '__dict__'):
        print(prefix + json.dumps(message.__dict__, indent=2, default=str))
    else:
        print(prefix + str(message))


# --- –ù–ê–® API –ù–ê–î PYMAX ---
class API:
    def __init__(self, client_instance, config_instance):
        self.client = client_instance
        self.config = config_instance
        self.me = None
        self.last_known_chat_id = None # –ü–∞–º—è—Ç—å –¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ "–ü—Ä—Ä"
        self.message_to_chat_cache = {} # –ö—ç—à –¥–ª—è —Å–≤—è–∑–∏ message_id -> chat_id
        self.BOT_NAME = BOT_NAME
        self.BOT_VERSION = BOT_VERSION
        self.BOT_VERSION_CODE = BOT_VERSION_CODE

    def set_me(self, me_instance):
        self.me = me_instance
    
    def update_last_known_chat_id(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç '–ø–∞–º—è—Ç—å' –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ '–ü—Ä—Ä')."""
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_known_chat_id –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ "–ü—Ä—Ä"
        if hasattr(self, 'me') and self.me and message.sender != self.me.id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if hasattr(message, 'chat_id') and message.chat_id:
                self.last_known_chat_id = message.chat_id
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω last_known_chat_id: {self.last_known_chat_id}")
            else:
                # Fallback: –∏—â–µ–º –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                for dialog in self.client.dialogs:
                    if str(message.sender) in dialog.participants:
                        self.last_known_chat_id = dialog.id
                        print(f"‚ö†Ô∏è Fallback: –æ–±–Ω–æ–≤–ª–µ–Ω last_known_chat_id: {self.last_known_chat_id}")
                        return

    async def await_chat_id(self, message):
        """
        –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î –ü–û–õ–£–ß–ï–ù–ò–Ø CHAT_ID.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à, –ø–æ–∏—Å–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã.
        """
        try:
            message_id_int = int(message.id)
        except (ValueError, TypeError):
            print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {message.id} !!!")
            return None

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if message_id_int in self.message_to_chat_cache:
            cached_chat_id = self.message_to_chat_cache[message_id_int]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω chat_id –≤ –∫—ç—à–µ: {cached_chat_id}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç
            for conv in (self.client.dialogs + self.client.chats):
                if conv.id == cached_chat_id and conv.last_message and conv.last_message.id == message_id_int:
                    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —á–∞—Ç {cached_chat_id} —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id_int}")
                    return cached_chat_id
            
            print(f"‚ö†Ô∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∏—â–µ–º –∑–∞–Ω–æ–≤–æ...")
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
            del self.message_to_chat_cache[message_id_int]

        # 2. –ò—â–µ–º –ø–æ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π —Å–ø–æ—Å–æ–±)
        print(f"üîç –ò—â–µ–º —á–∞—Ç –ø–æ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id_int}...")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(self.client.dialogs)}, —á–∞—Ç–æ–≤: {len(self.client.chats)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥–∏:")
        for dialog in self.client.dialogs:
            last_msg_id = dialog.last_message.id if dialog.last_message else "None"
            print(f"   –î–∏–∞–ª–æ–≥ {dialog.id}: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_msg_id}")
            if dialog.last_message and dialog.last_message.id == message_id_int:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–∏–∞–ª–æ–≥ {dialog.id} –ø–æ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                self.message_to_chat_cache[message_id_int] = dialog.id
                return dialog.id
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç—ã:")
        for chat in self.client.chats:
            last_msg_id = chat.last_message.id if chat.last_message else "None"
            print(f"   –ß–∞—Ç {chat.id}: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_msg_id}")
            if chat.last_message and chat.last_message.id == message_id_int:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç {chat.id} –ø–æ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                self.message_to_chat_cache[message_id_int] = chat.id
                return chat.id

        # 3. –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤...")
        for attempt in range(50): # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 5 —Å–µ–∫—É–Ω–¥
            for conv in (self.client.dialogs + self.client.chats):
                if conv.last_message and conv.last_message.id == message_id_int:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç {conv.id} –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    self.message_to_chat_cache[message_id_int] = conv.id
                    return conv.id
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ø—ã—Ç–æ–∫
            if attempt % 10 == 0 and attempt > 0:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/50")
            await asyncio.sleep(0.1)

        # 4. Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º last_known_chat_id –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—Å
        if hasattr(self, 'me') and self.me and message.sender == self.me.id and self.last_known_chat_id:
            print(f"‚ö†Ô∏è Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º last_known_chat_id = {self.last_known_chat_id}")
            return self.last_known_chat_id

        # 5. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –∏—â–µ–º –ª—é–±–æ–π —á–∞—Ç —Å –Ω–∞—à–∏–º ID
        if hasattr(self, 'me') and self.me and message.sender == self.me.id:
            for dialog in self.client.dialogs:
                if str(self.me.id) in dialog.participants:
                    print(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ª–æ–≥ {dialog.id}")
                    return dialog.id

        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chat_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id_int} –æ—Ç {message.sender}")
        return None

    def clear_message_cache(self, max_size=1000):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º."""
        if len(self.message_to_chat_cache) > max_size:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π
            items = list(self.message_to_chat_cache.items())
            self.message_to_chat_cache = dict(items[-500:])
            print(f"üßπ –û—á–∏—â–µ–Ω –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(self.message_to_chat_cache)} –∑–∞–ø–∏—Å–µ–π")

    async def get_chat_id_for_message(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (fallback –º–µ—Ç–æ–¥)."""
        # –ï—Å–ª–∏ chat_id —É–∂–µ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(message, 'chat_id') and message.chat_id:
            return message.chat_id
            
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        print(f"‚ö†Ô∏è Fallback: –∏—â–µ–º chat_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
        return await self.await_chat_id(message)

    async def edit(self, message, text, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        chat_id = getattr(message, 'chat_id', None)
        if not chat_id:
            chat_id = await self.await_chat_id(message)
        if not chat_id:
            await log_critical_error(Exception("await_chat_id timeout"), message, self.client)
            return
        try:
            print(f"üìù –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ —á–∞—Ç–µ {chat_id}")
            result = await self.client.edit_message(chat_id=chat_id, message_id=message.id, text=text, **kwargs)
            if result is None:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                print(f"‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
                return await self.client.send_message(chat_id=chat_id, text=text, notify=True)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await log_critical_error(e, message, self.client, chat_id)

    async def send(self, chat_id, text, **kwargs):
        return await self.client.send_message(chat_id=chat_id, text=text, **kwargs)
    
    async def send_file(self, chat_id, file_path, text="", **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —á–∞—Ç."""
        try:
            from pathlib import Path
            import aiofiles
            
            file_path = Path(file_path)
            if not file_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {file_path.name} –≤ —á–∞—Ç {chat_id}")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            async with aiofiles.open(file_path, 'rb') as f:
                file_content = await f.read()
            
            print(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            upload_url = await self._get_file_upload_url()
            if not upload_url:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {upload_url}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            file_token = await self._upload_file_to_server(upload_url, file_content, file_path.name)
            if not file_token:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Ç–æ–∫–µ–Ω: {file_token}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–º
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–º...")
            import asyncio
            await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
            return await self._send_message_with_file(chat_id, text, file_token, file_path.name, **kwargs)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None
    
    async def send_photo(self, chat_id, file_path, text="", **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —á–∞—Ç."""
        try:
            from pathlib import Path
            import aiofiles
            from pymax.files import Photo
            from pymax.static import AttachType
            
            file_path = Path(file_path)
            if not file_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é {file_path.name} –≤ —á–∞—Ç {chat_id}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Photo
            photo = Photo(path=str(file_path))
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            photo_data = photo.validate_photo()
            if not photo_data:
                raise ValueError(f"–§–∞–π–ª {file_path.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π")
            
            print(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤–∞–ª–∏–¥–Ω–∞: {photo_data[0]} ({photo_data[1]})")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä–µ–∑ PyMax
            attach = await self.client._upload_photo(photo)
            if not attach:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
            print(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            return await self.client.send_message(
                chat_id=chat_id,
                text=text,
                photo=photo,
                notify=kwargs.get('notify', True)
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None
    
    async def _get_file_upload_url(self):
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞."""
        try:
            from pymax.static import Opcode
            from pymax.payloads import UploadPhotoPayload
            
            print("üîç DEBUG: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ opcode –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            opcodes_to_try = [
                (Opcode.FILE_UPLOAD, "FILE_UPLOAD"),
                (Opcode.PHOTO_UPLOAD, "PHOTO_UPLOAD"),  # Fallback –∫ —Ñ–æ—Ç–æ
                (Opcode.VIDEO_UPLOAD, "VIDEO_UPLOAD"),  # Fallback –∫ –≤–∏–¥–µ–æ
            ]
            
            for opcode, opcode_name in opcodes_to_try:
                print(f"üîç DEBUG: –ü—Ä–æ–±—É–µ–º {opcode_name} (opcode {opcode})...")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ payload, —á—Ç–æ –∏ –¥–ª—è —Ñ–æ—Ç–æ
                    payload = UploadPhotoPayload().model_dump(by_alias=True)
                    data = await self.client._send_and_wait(
                        opcode=opcode,
                        payload=payload,
                        timeout=10.0
                    )
                    
                    print(f"üîç DEBUG: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ({opcode_name}): {data}")
                    
                    if error := data.get("payload", {}).get("error"):
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∑–∫–∏ ({opcode_name}): {error}")
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                    payload = data.get("payload", {})
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä—è–º–æ–π url (–∫–∞–∫ –¥–ª—è —Ñ–æ—Ç–æ)
                    upload_url = payload.get("url")
                    if upload_url:
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø—Ä—è–º–æ–π, {opcode_name}): {upload_url}")
                        return upload_url
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 2: url –≤ info –º–∞—Å—Å–∏–≤–µ
                    info = payload.get("info", [])
                    if info and len(info) > 0:
                        upload_url = info[0].get("url")
                        if upload_url:
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–∏–∑ info, {opcode_name}): {upload_url}")
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ info –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            if "token" in info[0]:
                                self._last_upload_token = info[0]["token"]
                                print(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ info: {self._last_upload_token}")
                            return upload_url
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 3: files –≤ –æ—Ç–≤–µ—Ç–µ (–∫–∞–∫ –¥–ª—è —Ñ–æ—Ç–æ)
                    files = payload.get("files", {})
                    if files:
                        file_data = next(iter(files.values()), None)
                        if file_data and "url" in file_data:
                            upload_url = file_data["url"]
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–∏–∑ files, {opcode_name}): {upload_url}")
                            return upload_url
                    
                    print(f"‚ùå URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ ({opcode_name})")
                    print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ payload: {list(payload.keys())}")
                    if info:
                        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ info[0]: {list(info[0].keys()) if info[0] else '–ø—É—Å—Ç–æ–π'}")
                    if files:
                        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ files: {list(files.keys())}")
                    
                    # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π opcode
                    continue
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {opcode_name}: {e}")
                    continue
            
            print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None
    
    async def _upload_file_to_server(self, upload_url, file_content, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω."""
        try:
            import aiohttp
            import json
            
            print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {filename} –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            print(f"   URL: {upload_url}")
            print(f"   –†–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
            
            form = aiohttp.FormData()
            form.add_field(
                name="file",
                value=file_content,
                filename=filename,
                content_type="text/plain"
            )
            
            async with aiohttp.ClientSession() as session:
                async with session.post(upload_url, data=form) as response:
                    print(f"üîç DEBUG: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status}")
                    
                    if response.status == 200:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –æ—Ç–≤–µ—Ç–∞
                        content_type = response.headers.get('content-type', '').lower()
                        print(f"üîç DEBUG: Content-Type –æ—Ç–≤–µ—Ç–∞: {content_type}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                        response_text = await response.text()
                        print(f"üîç DEBUG: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:200]}...")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ JSON —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ JSON
                        if 'application/json' in content_type or response_text.strip().startswith('{'):
                            try:
                                result = json.loads(response_text)
                                print(f"üîç DEBUG: JSON –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
                                
                                if "files" in result and result["files"]:
                                    file_data = next(iter(result["files"].values()))
                                    token = file_data.get("token")
                                    if token:
                                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω —Ñ–∞–π–ª–∞: {token}")
                                        return token
                                    else:
                                        print("‚ùå –¢–æ–∫–µ–Ω —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                                        return None
                                else:
                                    print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
                                    return None
                            except json.JSONDecodeError as json_err:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {json_err}")
                                print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                                return None
                        else:
                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
                            print(f"üîç DEBUG: –ù–µ JSON –æ—Ç–≤–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞")
                            
                            # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                            if "token" in response_text.lower():
                                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ
                                import re
                                token_match = re.search(r'"token":\s*"([^"]+)"', response_text)
                                if token_match:
                                    token = token_match.group(1)
                                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ: {token}")
                                    return token
                            
                            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑ URL –∑–∞–≥—Ä—É–∑–∫–∏
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
                            
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
                            if hasattr(self, '_last_upload_token') and self._last_upload_token:
                                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {self._last_upload_token}")
                                return self._last_upload_token
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ URL –∑–∞–≥—Ä—É–∑–∫–∏
                            import re
                            token_match = re.search(r'token=([^&]+)', upload_url)
                            if token_match:
                                token = token_match.group(1)
                                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL: {token}")
                                return token
                            
                            # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                            if 'token' in response_text:
                                token_match = re.search(r'"token":\s*"([^"]+)"', response_text)
                                if token_match:
                                    token = token_match.group(1)
                                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {token}")
                                    return token
                            
                            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º fileId –∏–∑ URL
                            file_id_match = re.search(r'id=(\d+)', upload_url)
                            if file_id_match:
                                file_id = file_id_match.group(1)
                                print(f"‚ö†Ô∏è Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º fileId –∏–∑ URL: {file_id}")
                                return file_id
                            
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ fileId")
                            return None
                    else:
                        response_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: HTTP {response.status}")
                        print(f"   –û—Ç–≤–µ—Ç: {response_text}")
                        return None
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None
    
    async def _send_message_with_file(self, chat_id, text, file_token, filename, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º."""
        try:
            from pymax.static import Opcode
            from pymax.payloads import SendMessagePayload, SendMessagePayloadMessage
            import time
            
            print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º:")
            print(f"   Chat ID: {chat_id}")
            print(f"   Text: {text}")
            print(f"   File Token: {file_token}")
            print(f"   Filename: {filename}")
            
            # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ file_token —á–∏—Å–ª–æ–º (fileId) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (token)
            if file_token.isdigit():
                # –≠—Ç–æ fileId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ fileId
                attach_data = {
                    "_type": "FILE",
                    "name": filename,
                    "fileId": int(file_token)
                }
                print(f"üîç DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º fileId: {file_token}")
            else:
                # –≠—Ç–æ —Ç–æ–∫–µ–Ω
                attach_data = {
                    "_type": "FILE",
                    "name": filename,
                    "token": file_token
                }
                print(f"üîç DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {file_token}")
            
            message_payload = SendMessagePayloadMessage(
                text=text,
                cid=int(time.time() * 1000),
                elements=[],
                attaches=[attach_data]
            )
            
            payload = SendMessagePayload(
                chat_id=chat_id,
                message=message_payload,
                notify=kwargs.get('notify', True)
            ).model_dump(by_alias=True)
            
            print(f"üîç DEBUG: Payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {payload}")
            
            data = await self.client._send_and_wait(
                opcode=Opcode.MSG_SEND,
                payload=payload
            )
            
            print(f"üîç DEBUG: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")
            
            if error := data.get("payload", {}).get("error"):
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º: {error}")
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                if error == "attachment.not.ready":
                    print(f"‚è≥ –§–∞–π–ª –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º –µ—â–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    import asyncio
                    await asyncio.sleep(3)
                    
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏...")
                    data = await self.client._send_and_wait(
                        opcode=Opcode.MSG_SEND,
                        payload=payload
                    )
                    
                    print(f"üîç DEBUG: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞): {data}")
                    
                    if error := data.get("payload", {}).get("error"):
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {error}")
                        return None
                    else:
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)")
                        return data
                else:
                    return None
                
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None

    async def reply(self, message, text, **kwargs):
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ß–£–ñ–ò–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if self.last_known_chat_id:
            await self.send(self.last_known_chat_id, text, **kwargs)

    async def delete(self, message, for_me=False, **kwargs):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        chat_id = getattr(message, 'chat_id', None)
        if not chat_id:
            chat_id = await self.await_chat_id(message)
        if not chat_id:
            await log_critical_error(Exception("await_chat_id timeout"), message, self.client)
            return
        try:
            return await self.client.delete_message(chat_id=chat_id, message_ids=[message.id], for_me=for_me, **kwargs)
        except Exception as e:
            await log_critical_error(e, message, self.client, chat_id)
    
    async def get_file_url(self, file_id, token, message_id=None, chat_id=None):
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–∞–π–ª–∞ –ø–æ file_id –∏ token —á–µ—Ä–µ–∑ WebSocket API."""
        try:
            print(f"üîç DEBUG: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ WebSocket API:")
            print(f"   File ID: {file_id}")
            print(f"   Token: {token}")
            print(f"   Message ID: {message_id}")
            print(f"   Chat ID: {chat_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º WebSocket API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞
            from pymax.static import Opcode
            
            print("üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å FILE_DOWNLOAD —á–µ—Ä–µ–∑ WebSocket...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã payload –¥–ª—è FILE_DOWNLOAD —Å messageId –∏ chatId
            payloads_to_try = []
            
            if message_id and chat_id:
                payloads_to_try = [
                    {"fileId": int(file_id), "token": token, "messageId": str(message_id), "chatId": int(chat_id)},
                    {"fileId": str(file_id), "token": token, "messageId": str(message_id), "chatId": int(chat_id)},
                    {"id": int(file_id), "token": token, "messageId": str(message_id), "chatId": int(chat_id)},
                    {"id": str(file_id), "token": token, "messageId": str(message_id), "chatId": int(chat_id)},
                ]
            else:
                # Fallback –±–µ–∑ messageId –∏ chatId
                payloads_to_try = [
                    {"fileId": int(file_id), "token": token},
                    {"fileId": str(file_id), "token": token},
                    {"id": int(file_id), "token": token},
                    {"id": str(file_id), "token": token},
                ]
            
            for i, payload in enumerate(payloads_to_try):
                print(f"üîç DEBUG: –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{len(payloads_to_try)} - Payload: {payload}")
                
                try:
                    data = await self.client._send_and_wait(
                        opcode=Opcode.FILE_DOWNLOAD,
                        payload=payload,
                        timeout=10.0
                    )
                    
                    print(f"üîç DEBUG: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {data}")
                    
                    if error := data.get("payload", {}).get("error"):
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {error}")
                        continue
                        
                    file_url = data.get("payload", {}).get("url")
                    if file_url:
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {file_url}")
                        return file_url
                    else:
                        print(f"‚ùå URL —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
                        continue
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}: {e}")
                    continue
            
            print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è URL —á–µ—Ä–µ–∑ WebSocket –Ω–µ —É–¥–∞–ª–∏—Å—å")
            
            # Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –Ω–∞–ø—Ä—è–º—É—é
            print("üîç DEBUG: Fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –Ω–∞–ø—Ä—è–º—É—é...")
            direct_url = f"https://files.oneme.ru/{file_id}/{token}"
            print(f"üîç DEBUG: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: {direct_url}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
            try:
                import aiohttp
                async with aiohttp.ClientSession() as session:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ PyMax
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                        'Accept': '*/*',
                        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                        'Origin': 'https://web.max.ru',
                        'Referer': 'https://web.max.ru/',
                    }
                    
                    async with session.head(direct_url, headers=headers) as response:
                        if response.status == 200:
                            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                            return direct_url
                        else:
                            print(f"‚ùå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: HTTP {response.status}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: {e}")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤)
            print("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL")
            return direct_url
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL —Ñ–∞–π–ª–∞: {e}")
            import traceback
            print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
            return None


    async def load_from_file(self, message):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        chat_id = getattr(message, 'chat_id', None)
        if not chat_id:
            chat_id = await self.await_chat_id(message)
        if not chat_id: return
        
        await self.client.edit_message(chat_id=chat_id, message_id=message.id, text="‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –º–æ–¥—É–ª—è...")
        attach = message.attaches[0]
        try:
            file_url = getattr(attach, 'url', None); file_name = getattr(attach, 'name', f"module.py")
            if not file_url: await self.client.edit_message(chat_id=chat_id, message_id=message.id, text="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL."); return
            if not file_name.endswith(".py"): await self.client.edit_message(chat_id=chat_id, message_id=message.id, text="‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .py"); return
            
            async with aiohttp.ClientSession() as session, session.get(file_url) as resp:
                if resp.status == 200:
                    from .loader import load_module
                    module_path = MODULES_DIR / file_name
                    async with aiofiles.open(module_path, mode='wb') as f: await f.write(await resp.read())
                    response = await load_module(module_path, self)
                    await self.client.edit_message(chat_id=chat_id, message_id=message.id, text=f"–í—ã–≤–æ–¥:\n{response}")
                else: await self.client.edit_message(chat_id=chat_id, message_id=message.id, text=f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {resp.status}")
        except Exception as e:
            await log_critical_error(e, message, self.client, chat_id)