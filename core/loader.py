# –§–∞–π–ª: core/loader.py (v0.2.4)
import importlib.util
import sys
import subprocess
import re
from pathlib import Path
from core.api import BOT_VERSION_CODE, MODULES_DIR

COMMANDS = {}
MODULE_COMMANDS = {}
LOADED_MODULES = {}
WATCHERS = [] # –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ—Ç—á–µ—Ä–æ–≤
MODULE_IDS = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID –º–æ–¥—É–ª–µ–π: {module_id: module_name}
 
class ModuleAPIWrapper:
    def __init__(self, module_name, api):
        self._module_name = module_name
        self._api = api
        
        # –î–µ–ª–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã API –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –Ω–∞–ø—Ä—è–º—É—é
        for attr_name in dir(api):
            if not attr_name.startswith('_') and callable(getattr(api, attr_name)):
                setattr(self, attr_name, getattr(api, attr_name))

    def register_command(self, command_name, function):
        if command_name in COMMANDS:
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–æ–¥—É–ª—å '{self._module_name}' –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É '{command_name}'. –û—Ç–∫–∞–∑–∞–Ω–æ.")
            return False
        description = function.__doc__ or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è."
        MODULE_COMMANDS[command_name] = {'function': function, 'description': description}
        if self._module_name not in LOADED_MODULES: LOADED_MODULES[self._module_name] = {'commands': {}, 'watchers': []}
        LOADED_MODULES[self._module_name]['commands'][command_name] = description
        return True
    
    def register_watcher(self, function):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        WATCHERS.append(function)
        if self._module_name not in LOADED_MODULES: LOADED_MODULES[self._module_name] = {'commands': {}, 'watchers': []}
        LOADED_MODULES[self._module_name]['watchers'].append(function)
        print(f"–ú–æ–¥—É–ª—å '{self._module_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –≤–æ—Ç—á–µ—Ä.")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–¥—É–ª–µ–π
    async def send_message(self, chat_id, text, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç."""
        return await self._api.send(chat_id, text, **kwargs)
    
    async def edit_message(self, message, text, **kwargs):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        return await self._api.edit(message, text, **kwargs)
    
    async def delete_message(self, message, **kwargs):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        return await self._api.delete(message, **kwargs)
    
    async def reply_to_message(self, message, text, **kwargs):
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        return await self._api.reply(message, text, **kwargs)
    
    async def send_photo(self, chat_id, file_path, text="", **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —á–∞—Ç."""
        return await self._api.send_photo(chat_id, file_path, text, **kwargs)
    
    async def send_file(self, chat_id, file_path, text="", **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —á–∞—Ç."""
        return await self._api.send_file(chat_id, file_path, text, **kwargs)
    
    def get_chat_id(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        return getattr(message, 'chat_id', None)
    
    def get_sender_id(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
        return getattr(message, 'sender', None)
    
    def get_message_text(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
        return getattr(message, 'text', '')
    
    def get_message_id(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è."""
        return getattr(message, 'id', None)

def version_to_tuple(v: str):
    try: return tuple(map(int, v.split('.')))
    except: return (0,0,0)

def validate_module_id(module_id: str) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç ID –º–æ–¥—É–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
    - 2-32 —Å–∏–º–≤–æ–ª–∞
    - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã
    - –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    
    Returns:
        (is_valid, error_message)
    """
    if not module_id:
        return False, "ID –º–æ–¥—É–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(module_id) < 2 or len(module_id) > 32:
        return False, "ID –º–æ–¥—É–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤"
    
    if not module_id[0].isalpha():
        return False, "ID –º–æ–¥—É–ª—è –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã"
    
    if not re.match(r'^[a-zA-Z0-9_-]+$', module_id):
        return False, "ID –º–æ–¥—É–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
    
    return True, ""

def check_duplicate_module_id(module_id: str, module_name: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç ID –º–æ–¥—É–ª—è.
    
    Returns:
        (is_duplicate, error_message)
    """
    if module_id in MODULE_IDS and MODULE_IDS[module_id] != module_name:
        return True, f"ID '{module_id}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥—É–ª–µ–º '{MODULE_IDS[module_id]}'"
    
    return False, ""

def parse_module_header(path: Path):
    header = {"name": path.stem, "version": "1.0.0", "dependencies": [], "min-maxli": "0", "id": None}
    with open(path, 'r', encoding='utf-8') as f:
        for line in f.readlines()[:10]:
            if line.startswith('#'):
                for key in ["name", "version", "developer", "dependencies", "min-maxli", "id"]:
                    match = re.search(rf"^\s*#\s*{key}\s*:\s*(.+)", line)
                    if match:
                        value = match.group(1).strip()
                        if key == "dependencies": header[key] = [d.strip() for d in value.split(',') if d.strip()]
                        else: header[key] = value
    
    # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ ID
    if not header["id"]:
        header["id"] = path.stem
    
    return header

async def load_module(module_path: Path, api):
    module_name = module_path.stem
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã–≥—Ä—É–∂–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–∑–∞–º–µ–Ω—É
    if module_name in LOADED_MODULES:
        # –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –º–æ–¥—É–ª—è —Å –¥–∏—Å–∫–∞
        unload_result = await unload_module(module_name, remove_file=False)
        print(f"üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è '{module_name}': {unload_result}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
    was_module_loaded = module_name in LOADED_MODULES
    original_commands = {}
    original_watchers = []
    
    header = parse_module_header(module_path)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –º–æ–¥—É–ª—è
    module_id = header["id"]
    is_valid, error_msg = validate_module_id(module_id)
    if not is_valid:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID –º–æ–¥—É–ª—è: {error_msg}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ID
    is_duplicate, duplicate_msg = check_duplicate_module_id(module_id, module_name)
    if is_duplicate:
        return f"‚ùå –û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID: {duplicate_msg}"
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è –ø–æ ID, –µ—Å–ª–∏ ID –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if module_id != module_name:
        new_module_path = module_path.parent / f"{module_id}.py"
        if new_module_path.exists() and new_module_path != module_path:
            return f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å ID '{module_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_module_path.name}"
        
        try:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
            module_path.rename(new_module_path)
            module_path = new_module_path
            module_name = module_id
            print(f"üìù –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {module_path.stem}.py ‚Üí {module_id}.py")
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è: {e}"
    
    required_version = int(header["min-maxli"])
    current_version = BOT_VERSION_CODE
    if current_version < required_version: return f"‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å '{header['name']}' —Ç—Ä–µ–±—É–µ—Ç Maxli v{header['min-maxli']}. –í–∞—à–∞ –≤–µ—Ä—Å–∏—è: v{BOT_VERSION_CODE}."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞
    installed_dependencies = []
    if header["dependencies"]:
        try:
            print(f"  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {module_name}: {header['dependencies']}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", *header['dependencies']])
            installed_dependencies = header['dependencies'].copy()
        except subprocess.CalledProcessError as e: 
            return f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}"
    
    try:
        spec = importlib.util.spec_from_file_location(module_name, module_path)
        module = importlib.util.module_from_spec(spec); sys.modules[module_name] = module
        spec.loader.exec_module(module)
        
        if hasattr(module, "register"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ—Ç—á–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
            if module_name in LOADED_MODULES:
                original_commands = LOADED_MODULES[module_name].get('commands', {}).copy()
                original_watchers = LOADED_MODULES[module_name].get('watchers', []).copy()
            
            LOADED_MODULES[module_name] = {'header': header, 'commands': {}, 'watchers': []}
            
            try:
                await module.register(ModuleAPIWrapper(module_name, api))
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ID –º–æ–¥—É–ª—è
                MODULE_IDS[module_id] = module_name
                
                version = header.get('version', '1.0.0')
                return f"‚úÖ –ú–æ–¥—É–ª—å '{header.get('name', module_name)}' (ID: {module_id}) v{version} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω."
            except Exception as register_error:
                # –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è '{module_name}': {register_error}")
                await rollback_module(module_name, was_module_loaded, original_commands, original_watchers)
                return f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è '{module_name}': {register_error}"
        else:
            if module_name in sys.modules: del sys.modules[module_name]
            return f"‚ùå –û—à–∏–±–∫–∞: –≤ –º–æ–¥—É–ª–µ '{module_name}' –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ register()."
    except Exception as e:
        # –û—Ç–∫–∞—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{module_name}': {e}")
        await rollback_module(module_name, was_module_loaded, original_commands, original_watchers)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if not was_module_loaded and module_path.exists():
            try:
                module_path.unlink()
                print(f"üßπ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –º–æ–¥—É–ª—è: {module_path}")
            except Exception as delete_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –º–æ–¥—É–ª—è: {delete_error}")
        
        return f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{module_name}': {e}"

async def rollback_module(module_name, was_loaded, original_commands, original_watchers):
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏."""
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if module_name in LOADED_MODULES:
            current_commands = LOADED_MODULES[module_name].get('commands', {})
            for cmd in current_commands:
                if cmd in MODULE_COMMANDS:
                    del MODULE_COMMANDS[cmd]
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for cmd, desc in original_commands.items():
                if cmd in MODULE_COMMANDS:
                    MODULE_COMMANDS[cmd] = {'function': None, 'description': desc}
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ç—á–µ—Ä—ã
        if module_name in LOADED_MODULES:
            current_watchers = LOADED_MODULES[module_name].get('watchers', [])
            for watcher in current_watchers:
                if watcher in WATCHERS:
                    WATCHERS.remove(watcher)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Ç—á–µ—Ä—ã
            for watcher in original_watchers:
                if watcher not in WATCHERS:
                    WATCHERS.append(watcher)
        
        # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ LOADED_MODULES
        if not was_loaded and module_name in LOADED_MODULES:
            del LOADED_MODULES[module_name]
        
        # –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å –∏–∑ sys.modules
        if module_name in sys.modules:
            del sys.modules[module_name]
        
        print(f"üîÑ –û—Ç–∫–∞—Ç –º–æ–¥—É–ª—è '{module_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
    except Exception as rollback_error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–æ–¥—É–ª—è '{module_name}': {rollback_error}")

async def unload_module(module_name: str, remove_file: bool = True):
    if module_name not in LOADED_MODULES: return f"–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥—É–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    module_header = LOADED_MODULES[module_name].get('header', {})
    module_id = module_header.get('id', module_name)
    
    # –í—ã–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    commands_to_remove = list(LOADED_MODULES[module_name].get('commands', {}).keys())
    for cmd in commands_to_remove:
        if cmd in MODULE_COMMANDS: del MODULE_COMMANDS[cmd]
    # –í—ã–≥—Ä—É–∂–∞–µ–º –≤–æ—Ç—á–µ—Ä—ã
    watchers_to_remove = LOADED_MODULES[module_name].get('watchers', [])
    for watcher in watchers_to_remove:
        if watcher in WATCHERS: WATCHERS.remove(watcher)
    
    # –£–¥–∞–ª—è–µ–º ID –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if module_id in MODULE_IDS:
        del MODULE_IDS[module_id]
        
    del LOADED_MODULES[module_name]
    if module_name in sys.modules: del sys.modules[module_name]
    if remove_file:
        (MODULES_DIR / f"{module_name}.py").unlink(missing_ok=True)
    return f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' (ID: {module_id}) —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω –∏ —É–¥–∞–ª–µ–Ω."

async def register_system_module(module):
    if hasattr(module, "register"):
        await module.register(COMMANDS)

async def load_all_modules(api):
    print("--- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π ---")
    from core_modules import info, management, ping, settings, modules, restart
    await register_system_module(info); await register_system_module(management)
    await register_system_module(ping); await register_system_module(settings)
    await register_system_module(modules); await register_system_module(restart)
    MODULES_DIR.mkdir(exist_ok=True)
    print("--- –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π ---")
    for file in MODULES_DIR.glob("*.py"):
        if file.stem != "__init__":
            result = await load_module(file, api)
            print(f"  - {file.name}: {result}")
    print("---------------------------------------")