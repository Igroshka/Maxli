# name: Zetta - AI models
# version: 13.0 (Maxli Port v2)
# developer: @hikkagpt (ported by YouRooni & AI)
# min-maxli: 0.2.5
# dependencies: aiohttp, requests, SpeechRecognition, pydub

import json
import logging
import aiohttp
import re
import base64
import io
import random
from pathlib import Path

try:
    import speech_recognition as sr
    from pydub import AudioSegment
    SPEECH_RECOGNITION_AVAILABLE = True
except ImportError:
    SPEECH_RECOGNITION_AVAILABLE = False

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ú–û–î–£–õ–Ø ---
DB_FILE = "zetta_db.json"
db = {}
available_models = { "13": "gpt-4o", "14": "gpt-4o-mini", "16": "gpt-3.5-turbo" }

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–î –ú–û–î–£–õ–Ø ---
def load_db(): global db; db = json.load(open(DB_FILE, 'r')) if Path(DB_FILE).exists() else {}
def save_db(): open(DB_FILE, 'w').write(json.dumps(db, indent=4))
def db_get(key, default=None): return db.get(key, default)
def db_set(key, value): db[key] = value; save_db()

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
async def send_request_to_api(api_url, payload):
    try:
        async with aiohttp.ClientSession() as session, session.post(api_url, json=payload, timeout=120) as response:
            data = await response.json(); answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
            return base64.b64decode(answer).decode('utf-8')
    except Exception as e: return f"üö´ –û—à–∏–±–∫–∞ API: {e}"

# --- –ö–û–ú–ê–ù–î–´ ---
async def ai_command(api, message, args):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .ai <–∑–∞–ø—Ä–æ—Å>"""
    if not args: return await api.edit(message, "ü§î –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    await api.edit(message, "ü§î –î—É–º–∞—é...")
    api_url = "http://195.62.49.61:5001/OnlySq-Zetta/v1/models"
    payload = {"model": db_get("default_model", "gpt-4o-mini"), "request": {"messages": [{"role": "user", "content": " ".join(args)}]}}
    answer = await send_request_to_api(api_url, payload)
    await api.edit(message, f"üí° –û—Ç–≤–µ—Ç:\n{answer}")

async def chat_command(api, message, args):
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .chat on/off"""
    chat_id = api.get_target_chat_id()
    if not chat_id: return await api.edit(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.")
    active_chats = db_get("active_chats", {})
    if args and args[0].lower() == 'off':
        if str(chat_id) in active_chats:
            del active_chats[str(chat_id)]; db_set("active_chats", active_chats)
            await api.edit(message, "üì¥ –†–µ–∂–∏–º —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        active_chats[str(chat_id)] = True; db_set("active_chats", active_chats)
        await api.edit(message, "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω.")

async def model_command(api, message, args):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ò–ò. .model <–Ω–æ–º–µ—Ä> –∏–ª–∏ .model list"""
    if not args: return await api.edit(message, f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {db_get('default_model', 'gpt-4o-mini')}")
    if args[0].lower() == 'list':
        model_list = "\n".join([f"{k}. {v}" for k, v in available_models.items()])
        return await api.edit(message, f"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{model_list}")
    if args[0] in available_models:
        model_name = available_models[args[0]]; db_set("default_model", model_name)
        await api.edit(message, f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {model_name}")
    else: await api.edit(message, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏.")

# --- –í–û–¢–ß–ï–† ---
async def watcher(api, message):
    """–°–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö."""
    active_chats = db_get("active_chats", {})
    if not message.text or not api.last_known_chat_id or str(api.last_known_chat_id) not in active_chats:
        return
    if message.sender == api.me.id: return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–æ—Ç—á–µ—Ä–µ
    
    chat_history = db_get("chat_history", {})
    chat_id_str = str(api.last_known_chat_id)
    if chat_id_str not in chat_history: chat_history[chat_id_str] = []
    
    chat_history[chat_id_str].append({"role": "user", "content": message.text})
    if len(chat_history[chat_id_str]) > 10: chat_history[chat_id_str] = chat_history[chat_id_str][-10:]
    
    api_url = "http://195.62.49.61:5001/OnlySq-Zetta/v1/models"
    payload = {"model": db_get("default_model", "gpt-4o-mini"), "request": {"messages": chat_history[chat_id_str]}}
    answer = await send_request_to_api(api_url, payload)
    
    if answer:
        chat_history[chat_id_str].append({"role": "assistant", "content": answer})
        db_set("chat_history", chat_history)
        await api.reply(message, answer, notify=True)

# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ---
async def register(bot_api):
    load_db()
    bot_api.register_command("ai", ai_command)
    bot_api.register_command("chat", chat_command)
    bot_api.register_command("model", model_command)
    bot_api.register_watcher(watcher)