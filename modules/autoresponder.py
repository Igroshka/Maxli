# name: Auto Responder
# version: 1.0.0
# developer: YouRooni & AI
# min-maxli: 0.2.5

import json
import re
from pathlib import Path

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ú–û–î–£–õ–Ø ---
DB_FILE = "autoresponder_db.json"
db = {}

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–î –ú–û–î–£–õ–Ø ---
def load_db():
    global db
    if Path(DB_FILE).exists():
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            db = json.load(f)
    else:
        db = {"rules": []}

def save_db():
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(db, f, indent=4, ensure_ascii=False)

# --- –ö–û–ú–ê–ù–î–´ ---

async def add_rule_command(api, message, args):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: |. C–∏–Ω—Ç–∞–∫—Å–∏—Å: .aradd <—Ç—Ä–∏–≥–≥–µ—Ä> | <–æ—Ç–≤–µ—Ç> | [scope]"""
    full_args = " ".join(args)
    parts = [p.strip() for p in full_args.split('|')]

    if len(parts) < 2:
        await api.edit(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π: .aradd <—Ç—Ä–∏–≥–≥–µ—Ä> | <–æ—Ç–≤–µ—Ç> | [scope]\nScope –º–æ–∂–µ—Ç –±—ã—Ç—å: pm, group, all (–ø–æ —É–º–æ–ª—á.)")
        return

    trigger, response = parts[0], parts[1]
    scope = parts[2].lower() if len(parts) > 2 else "all"
    is_regex = False

    if scope not in ["pm", "group", "all"]:
        await api.edit(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π scope: '{scope}'.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: pm, group, all.")
        return

    if trigger.lower().startswith("regex:"):
        is_regex = True
        trigger = trigger[6:].strip()
        try:
            re.compile(trigger)
        except re.error as e:
            await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏:\n{e}")
            return
    
    rule = {
        "trigger": trigger,
        "response": response,
        "scope": scope,
        "is_regex": is_regex
    }

    db.setdefault("rules", []).append(rule)
    save_db()
    await api.edit(message, f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–¢—Ä–∏–≥–≥–µ—Ä: {trigger}\n–û—Ç–≤–µ—Ç: {response}\n–û–±–ª–∞—Å—Ç—å: {scope}")

async def delete_rule_command(api, message, args):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
    if not args:
        await api.edit(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ .arlist –∏–ª–∏ –µ–≥–æ —Ç–æ—á–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä.")
        return

    arg = " ".join(args)
    rules = db.get("rules", [])
    
    if not rules:
        await api.edit(message, "–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."); return

    found = False
    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É
    try:
        index = int(arg) - 1
        if 0 <= index < len(rules):
            removed = rules.pop(index)
            found = True
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Ç—Ä–∏–≥–≥–µ—Ä–∞
        for i, rule in enumerate(rules):
            if rule["trigger"] == arg:
                removed = rules.pop(i)
                found = True
                break
    
    if found:
        save_db()
        await api.edit(message, f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º '{removed['trigger']}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await api.edit(message, "‚ùå –ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def list_rules_command(api, message, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞."""
    rules = db.get("rules", [])
    if not rules:
        await api.edit(message, "üìù –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –ø—É—Å—Ç—ã.\n–î–æ–±–∞–≤—å –Ω–æ–≤–æ–µ –∫–æ–º–∞–Ω–¥–æ–π .aradd")
        return

    response = "üìù –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:\n\n"
    for i, rule in enumerate(rules, 1):
        trigger_type = "regex" if rule["is_regex"] else "text"
        response += f"{i}. [{trigger_type}] {rule['trigger']}\n"
        response += f"   ‚ûî {rule['response']}\n"
        response += f"   (Scope: {rule['scope']})\n\n"
    
    await api.edit(message, response)

# --- –í–û–¢–ß–ï–† (–û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê) ---

async def responder_watcher(api, message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º."""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if (api.me and message.sender == api.me.id) or not message.text:
        return

    rules = db.get("rules", [])
    if not rules:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (pm –∏–ª–∏ group)
    chat_id = api.last_known_chat_id
    if not chat_id: return
    
    current_chat = next((c for c in (api.client.dialogs + api.client.chats) if c.id == chat_id), None)
    if not current_chat: return
    
    # –í pymax DIALOG - —ç—Ç–æ –ª–∏—á–∫–∞, CHAT - —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    current_scope = "pm" if current_chat.type.name == "DIALOG" else "group"

    for rule in rules:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
        if rule["scope"] != "all" and rule["scope"] != current_scope:
            continue

        match = False
        if rule["is_regex"]:
            if re.search(rule["trigger"], message.text, re.IGNORECASE):
                match = True
        else:
            if rule["trigger"].lower() in message.text.lower():
                match = True
        
        if match:
            # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
            await api.reply(message, rule["response"], notify=True)
            return

# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ---
async def register(bot_api):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ—Ç—á–µ—Ä –º–æ–¥—É–ª—è."""
    load_db()
    bot_api.register_command("aradd", add_rule_command)
    bot_api.register_command("ardel", delete_rule_command)
    bot_api.register_command("arlist", list_rules_command)
    bot_api.register_watcher(responder_watcher)
