import platform
import psutil
from core.loader import LOADED_MODULES, COMMANDS
from core.config import PREFIX, config, get_banner_url, save_config
import aiohttp
import tempfile
import os
from pymax.files import Photo

class InfoModule:

    async def configset_command(self, api, message, args):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –º–æ–¥—É–ª–µ: configset [1|2] [–º–æ–¥—É–ª—å] [–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è] [–∑–Ω–∞—á–µ–Ω–∏–µ]"""
        if len(args) < 4:
            await api.edit(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: configset [1|2] [–º–æ–¥—É–ª—å] [–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è] [–∑–Ω–∞—á–µ–Ω–∏–µ]")
            return
        mod_type = args[0]
        mod_id = args[1]
        var_name = args[2]
        value = ' '.join(args[3:])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥—É–ª—å –ø–æ —Ç–∏–ø—É –∏ –∏–º–µ–Ω–∏/–Ω–æ–º–µ—Ä—É
        module_name = None
        if mod_type == '1':
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (core_modules)
            modules_list = list(LOADED_MODULES.items())
            if mod_id.isdigit():
                idx = int(mod_id) - 1
                if 0 <= idx < len(modules_list):
                    module_name = modules_list[idx][0]
            else:
                for name, data in modules_list:
                    if mod_id.lower() == name.lower() or mod_id.lower() == data['header'].get('name', '').lower():
                        module_name = name
                        break
            if not module_name:
                await api.edit(message, f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å '{mod_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
            if module_name not in config:
                config[module_name] = {}
            # –ë–∞–Ω–Ω–µ—Ä ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è banner
            if var_name.lower() == 'banner':
                config[module_name]['banner'] = value
                save_config(config)
                await api.edit(message, f"‚úÖ –ë–∞–Ω–Ω–µ—Ä –¥–ª—è '{module_name}' –æ–±–Ω–æ–≤–ª—ë–Ω!")
                return
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            config[module_name][var_name] = value
            save_config(config)
            await api.edit(message, f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ {var_name} –¥–ª—è '{module_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return
        elif mod_type == '2':
            # –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ (external_modules)
            ext_mods = config.get('external_modules', {})
            modules_list = list(ext_mods.items())
            if mod_id.isdigit():
                idx = int(mod_id) - 1
                if 0 <= idx < len(modules_list):
                    module_name = modules_list[idx][0]
            else:
                for name, data in modules_list:
                    if mod_id.lower() == name.lower():
                        module_name = name
                        break
            if not module_name:
                await api.edit(message, f"‚ùå –í–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å '{mod_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ settings
            if 'settings' not in config['external_modules'][module_name]:
                config['external_modules'][module_name]['settings'] = {}
            config['external_modules'][module_name]['settings'][var_name] = value
            save_config(config)
            await api.edit(message, f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ {var_name} –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è '{module_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return
        else:
            await api.edit(message, "‚ùå –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 (–≥–ª–æ–±–∞–ª—å–Ω—ã–π) –∏–ª–∏ 2 (–≤–Ω–µ—à–Ω–∏–π) –º–æ–¥—É–ª—å.")
            return
    # –ö–µ—à –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ info: url -> (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, file_id/attach)
    _banner_cache = {
        'url': None,
        'file_path': None,
        'photo_token': None
    }
    """–ú–æ–¥—É–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –∏ —Å–∏—Å—Ç–µ–º–µ (–ø–æ –æ–±—Ä–∞–∑—Ü—É HerokuInfoMod)"""
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è info-–º–æ–¥—É–ª—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
        self.config = config.get('info', {
            'custom_message': None,
            'banner_url': get_banner_url('info') or '',
        })
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ config, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
        config['info'] = self.config
        save_config(config)

    async def info_command(self, api, message, args):
        snippet = getattr(message, 'text', '')
        api.LOG_BUFFER.append(f"[info] {snippet[:80]}")
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        try:
            await api.delete(message)
        except Exception as e:
            api.LOG_BUFFER.append(f"[info] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        python_version = platform.python_version()
        try:
            cpu_display = f"{psutil.cpu_percent()}%"
        except Exception:
            cpu_display = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        try:
            ram_display = f"{psutil.virtual_memory().percent}%"
        except Exception:
            ram_display = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        owner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if api.me and api.me.names:
            owner_name = api.me.names[0].name

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        info_text = self.config.get('custom_message') or (
            f"ü§ñ **{api.BOT_NAME}** *{api.BOT_VERSION} (#{api.BOT_VERSION_CODE})*\n\n"
            f"üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {owner_name}\n\n"
            f"üñ• **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–µ:**\n"
            f"    üêç **Python:** {python_version}\n"
            f"    üß† **CPU:** {cpu_display}\n"
            f"    üíæ **RAM:** {ram_display}\n\n"
            f"üìù **–ü—Ä–µ—Ñ–∏–∫—Å:** '{PREFIX if PREFIX else '.'}'"
        )
        banner = self.config.get('banner_url')
        if banner:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏ –¥–ª—è URL
            banner_url = banner.replace('\\', '/')
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            chat_id = getattr(message, 'chat_id', None)
            if not chat_id:
                chat_id = await api.await_chat_id(message)

            if chat_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à: –µ—Å–ª–∏ url —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à
                file_path = self._banner_cache.get('file_path')
                need_download = (
                    self._banner_cache.get('url') != banner_url or
                    not file_path or not os.path.exists(file_path)
                )
                if need_download:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(banner_url) as resp:
                            if resp.status != 200:
                                # –ï—Å–ª–∏ —Å–∫–∞—á–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                                await api.send(chat_id, info_text, markdown=True, notify=True) 
                                return
                            suffix = os.path.splitext(banner_url)[-1] or '.jpg'
                            with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
                                file_path = tmp.name
                                content = await resp.read()
                                tmp.write(content)
                    self._banner_cache['url'] = banner_url
                    self._banner_cache['file_path'] = file_path
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç Photo (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª)
                photo = Photo(path=file_path)
                photo_data = photo.validate_photo()
                if not photo_data:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    await api.send(chat_id, info_text, markdown=True, notify=True)
                    return
                await api.send_photo(
                    chat_id=chat_id,
                    text=info_text,
                    photo=photo,
                    markdown=True,
                    notify=True
                )
                return
        
        # –ï—Å–ª–∏ –±–∞–Ω–Ω–µ—Ä–∞ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_id = getattr(message, 'chat_id', None)
        if not chat_id:
            chat_id = await api.await_chat_id(message)
        await api.send(chat_id, info_text, markdown=True, notify=True)


    async def setinfo_command(self, api, message, args):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π info-—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ config info setinfo <—Ç–µ–∫—Å—Ç>"""
        if not args:
            await api.edit(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è info.")
            return
        self.config['custom_message'] = ' '.join(args)
        config['info'] = self.config
        save_config(config)
        await api.edit(message, "‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π info-—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    async def setbanner_command(self, api, message, args):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π info-–±–∞–Ω–Ω–µ—Ä —á–µ—Ä–µ–∑ config info setbanner <url>"""
        if not args:
            await api.edit(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ URL –±–∞–Ω–Ω–µ—Ä–∞.")
            return
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏ –¥–ª—è URL
        self.config['banner_url'] = args[0].replace('\\', '/').replace('\\', '/')
        config['info'] = self.config
        save_config(config)
        await api.edit(message, "‚úÖ –ë–∞–Ω–Ω–µ—Ä –¥–ª—è info –æ–±–Ω–æ–≤–ª–µ–Ω!")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é register (–æ–∂–∏–¥–∞–µ—Ç—Å—è loader'–æ–º)
info_module = InfoModule()

async def register(commands):
    commands['info'] = info_module.info_command
    commands['setinfo'] = info_module.setinfo_command
    commands['setbanner'] = info_module.setbanner_command
    commands['help'] = help_command
    commands['configset'] = info_module.configset_command

async def help_command(api, message, args):
    snippet = getattr(message, 'text', '')
    api.LOG_BUFFER.append(f"[help] {snippet[:80]}")
    if not args:
        response = "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        response += "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        response += f"{', '.join(COMMANDS.keys())}\n\n"
        if LOADED_MODULES:
            response += "üß© –ú–æ–¥—É–ª–∏:\n"
            for i, (name, data) in enumerate(LOADED_MODULES.items(), 1):
                response += f"{i}. {data['header'].get('name', name)}\n"
        response += f"\n–ò–Ω—Ñ–æ –æ –º–æ–¥—É–ª–µ: {PREFIX}help [–∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ/–Ω–æ–º–µ—Ä]"
    else:
        arg = ' '.join(args)
        found_module = None
        for i, (name, data) in enumerate(LOADED_MODULES.items(), 1):
            if arg == str(i) or arg.lower() == name.lower() or arg.lower() == data['header'].get('name', '').lower():
                found_module = data; break
        if not found_module:
            response = f"‚ùå –ú–æ–¥—É–ª—å '{arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        else:
            response = f"üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—é \"{found_module['header'].get('name')}\"\n"
            ver = found_module['header'].get('version', 'N/A'); dev = found_module['header'].get('developer', 'N/A')
            response += f"–í–µ—Ä—Å–∏—è: {ver} | –ê–≤—Ç–æ—Ä: {dev}\n\n"
            for cmd, desc in found_module['commands'].items():
                response += f"‚ñ´Ô∏è {PREFIX}{cmd} - {desc}\n"
    
    banner = get_banner_url("help")
    if banner:
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        chat_id = getattr(message, 'chat_id', None)
        if not chat_id:
            chat_id = await api.await_chat_id(message)

        if chat_id:
            try:
                await api.delete(message)
            except Exception:
                pass
            await api.send_photo(chat_id, banner, response)
            return

    await api.edit(message, response)