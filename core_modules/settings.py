from core.config import ALIASES, config, save_config
from core.loader import COMMANDS, MODULE_COMMANDS

async def addalias_command(api, message, args):
    if len(args) != 2: await api.edit(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π: {config['prefix']}addalias [–∞–ª–∏–∞—Å] [–∫–æ–º–∞–Ω–¥–∞]"); return
    alias, command_name = args[0].lower(), args[1].lower()
    if command_name not in COMMANDS and command_name not in MODULE_COMMANDS: await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ {command_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."); return
    ALIASES[alias] = command_name; config['aliases'] = ALIASES; save_config(config)
    await api.edit(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ê–ª–∏–∞—Å {config['prefix']}{alias} —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ {config['prefix']}{command_name}.")

async def remalias_command(api, message, args):
    if not args: await api.edit(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏ –∞–ª–∏–∞—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."); return
    alias_to_remove = args[0].lower()
    if alias_to_remove not in ALIASES: await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞: –ê–ª–∏–∞—Å {alias_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    del ALIASES[alias_to_remove]; config['aliases'] = ALIASES; save_config(config)
    await api.edit(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ê–ª–∏–∞—Å {config['prefix']}{alias_to_remove} —É–¥–∞–ª–µ–Ω.")

async def setprefix_command(api, message, args):
    new_prefix = args[0] if args else ""
    config['prefix'] = new_prefix
    save_config(config)
    # –í–ê–ñ–ù–û: –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
    from core import config as core_config
    core_config.PREFIX = new_prefix
    response_text = f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: {new_prefix}" if new_prefix else "‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–µ—Ñ–∏–∫—Å —É–±—Ä–∞–Ω."
    await api.edit(message, response_text)

async def register(commands):
    commands["addalias"] = addalias_command
    commands["remalias"] = remalias_command
    commands["setprefix"] = setprefix_command
    
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∞–ª–∏–∞—Å–∞–º/–ø—Ä–µ—Ñ–∏–∫—Å–∞–º –æ—Å—Ç–∞—é—Ç—Å—è

    # –ù–æ–≤–∞—è –µ–¥–∏–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async def config_command(api, message, args):
        # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–æ–≤
        if not args:
            await api.edit(message, "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥:\n\n1) system ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏\n2) external ‚Äî –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\nconfig 1 ‚Äî —Å–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏\nconfig 2 ‚Äî —Å–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏\nconfig 1 <–∏–º—è|–Ω–æ–º–µ—Ä> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–¥—É–ª—è\nconfig 2 <–∏–º—è|–Ω–æ–º–µ—Ä> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è")
            return
        section = args[0].lower()
        # numeric shortcuts: "1" -> system, "2" -> external
        if section == "1": section = "system"
        if section == "2": section = "external"

        # helper: truncate long values
        def _truncate(val, limit=80):
            s = str(val)
            return s if len(s) <= limit else s[:limit-3] + "..."

        # system modules
        if section == "system":
            # –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–µ–Ω–∞
            system_modules = ["info", "management", "ping", "settings", "modules", "restart"]
            # –°–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            available = []
            for m in system_modules:
                norm = f"{m}_maxli"
                ext = config.get("external_modules", {}).get(norm, {})
                if ext.get("settings"):
                    available.append((m, ext))

            if len(args) == 1:
                if not available:
                    await api.edit(message, "üì≠ –ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
                    return
                lines = ["ÔøΩ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:"] + [f"{i+1}) {m}" for i, (m, _) in enumerate(available)]
                await api.edit(message, "\n".join(lines))
                return

            query = args[1]
            chosen = None
            try:
                idx = int(query) - 1
                if 0 <= idx < len(available):
                    chosen, ext = available[idx]
            except Exception:
                chosen = None
            if not chosen:
                for m, e in available:
                    if m == query:
                        chosen, ext = m, e
                        break
            if not chosen:
                await api.edit(message, "‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.")
                return

            settings = ext.get("settings", {})
            descriptions = ext.get("descriptions", {})
            lines = [f"‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {chosen}:"]
            for k, v in settings.items():
                desc = descriptions.get(k, "")
                lines.append(f"‚Ä¢ {k} = {_truncate(v)} {'‚Äî ' + desc if desc else ''}")
            await api.edit(message, "\n".join(lines))
            return

        # external modules
        if section == "external":
            ext_all = config.get("external_modules", {})
            # –¢–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            external_keys = [k for k, v in ext_all.items() if not k.endswith("_maxli") and v.get("settings")]
            if len(args) == 1:
                if not external_keys:
                    await api.edit(message, "üì≠ –ù–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
                    return
                lines = ["üß© –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:"] + [f"{i+1}) {k}" for i, k in enumerate(external_keys)]
                await api.edit(message, "\n".join(lines))
                return

            query = args[1]
            chosen = None
            try:
                idx = int(query) - 1
                if 0 <= idx < len(external_keys):
                    chosen = external_keys[idx]
            except Exception:
                chosen = None
            if not chosen:
                if query in external_keys:
                    chosen = query
                else:
                    await api.edit(message, "‚ùå –í–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.")
                    return
            ext = ext_all.get(chosen, {})
            settings = ext.get("settings", {})
            descriptions = ext.get("descriptions", {})
            lines = [f"‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {chosen}:"]
            for k, v in settings.items():
                desc = descriptions.get(k, "")
                lines.append(f"‚Ä¢ {k} = {_truncate(v)} {'‚Äî ' + desc if desc else ''}")
            await api.edit(message, "\n".join(lines))
            return

        await api.edit(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –î–æ—Å—Ç—É–ø–Ω—ã: 1(system), 2(external)")

    commands["config"] = config_command