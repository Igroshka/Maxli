# –§–∞–π–ª: core_modules/modules.py
import asyncio
import aiohttp
import aiofiles
from pathlib import Path
from urllib.parse import urlparse
import re

from core.loader import load_module, MODULES_DIR, LOADED_MODULES
from core.api import BOT_NAME, BOT_VERSION
import difflib

def fuzzy_find_module(query):
    """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –º–æ–¥—É–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, ID –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏."""
    if not query:
        return None, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    available_modules = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
    for name, data in LOADED_MODULES.items():
        display_name = data.get('header', {}).get('name', name)
        available_modules.append({
            'name': name,
            'display_name': display_name,
            'file_path': MODULES_DIR / f"{name}.py",
            'loaded': True
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ modules
    for file_path in MODULES_DIR.glob("*.py"):
        if file_path.stem != "__init__":
            name = file_path.stem
            if not any(m['name'] == name for m in available_modules):
                available_modules.append({
                    'name': name,
                    'display_name': name,
                    'file_path': file_path,
                    'loaded': False
                })
    
    if not available_modules:
        return None, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    for module in available_modules:
        if module['name'].lower() == query.lower():
            return module, None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏
    for module in available_modules:
        if module['display_name'].lower() == query.lower():
            return module, None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —á–∏—Å–ª–æ–º (–Ω—É–º–µ—Ä–∞—Ü–∏—è)
    try:
        number = int(query)
        if 1 <= number <= len(available_modules):
            return available_modules[number - 1], None
    except ValueError:
        pass
    
    # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    names = [m['name'] for m in available_modules]
    display_names = [m['display_name'] for m in available_modules]
    
    # –ò—â–µ–º –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤
    matches = difflib.get_close_matches(query.lower(), [name.lower() for name in names], n=1, cutoff=0.6)
    if matches:
        for module in available_modules:
            if module['name'].lower() == matches[0]:
                return module, None
    
    # –ò—â–µ–º –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–º–µ–Ω–∞—Ö
    matches = difflib.get_close_matches(query.lower(), [name.lower() for name in display_names], n=1, cutoff=0.6)
    if matches:
        for module in available_modules:
            if module['display_name'].lower() == matches[0]:
                return module, None
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–µ –±–ª–∏–∑–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    all_names = names + display_names
    close_matches = difflib.get_close_matches(query.lower(), [name.lower() for name in all_names], n=3, cutoff=0.3)
    
    if close_matches:
        suggestions = []
        for match in close_matches:
            for module in available_modules:
                if module['name'].lower() == match or module['display_name'].lower() == match:
                    suggestions.append(f"‚Ä¢ {module['display_name']} ({module['name']})")
                    break
        return None, f"–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n" + "\n".join(suggestions)
    
    return None, "–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

async def load_command(api, message, args):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π."""
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ JSON —Å–æ–æ–±—â–µ–Ω–∏—è
    print("üîç DEBUG: JSON —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã load:")
    print(f"   ID: {message.id}")
    print(f"   Sender: {message.sender}")
    print(f"   Chat ID: {getattr(message, 'chat_id', '–ù–ï–¢')}")
    print(f"   Text: {message.text}")
    print(f"   Reply to: {getattr(message, 'reply_to_message', '–ù–ï–¢')}")
    if hasattr(message, 'reply_to_message') and message.reply_to_message:
        if isinstance(message.reply_to_message, dict):
            print(f"     Reply message ID: {message.reply_to_message.get('id', '–ù–ï–¢')}")
            print(f"     Reply message text: {message.reply_to_message.get('text', '–ù–ï–¢')}")
            print(f"     Reply message attaches: {len(message.reply_to_message.get('attaches', []))}")
            if message.reply_to_message.get('attaches'):
                for i, attach in enumerate(message.reply_to_message['attaches']):
                    print(f"       –í–ª–æ–∂–µ–Ω–∏–µ {i+1}: {attach.get('name', '–ë–ï–ó_–ò–ú–ï–ù–ò')} - {attach.get('token', '–ë–ï–ó_TOKEN')}")
        else:
            print(f"     Reply message ID: {getattr(message.reply_to_message, 'id', '–ù–ï–¢')}")
            print(f"     Reply message text: {getattr(message.reply_to_message, 'text', '–ù–ï–¢')}")
            print(f"     Reply message attaches: {len(getattr(message.reply_to_message, 'attaches', []))}")
    print(f"   Attaches: {len(message.attaches) if message.attaches else 0}")
    if message.attaches:
        for i, attach in enumerate(message.attaches):
            print(f"     –í–ª–æ–∂–µ–Ω–∏–µ {i+1}: {getattr(attach, 'name', '–ë–ï–ó_–ò–ú–ï–ù–ò')} - {getattr(attach, 'url', '–ë–ï–ó_URL')}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    print("üîç DEBUG: –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    import json as json_module
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–≤–æ–¥–∞
        msg_dict = {
            'id': message.id,
            'sender': message.sender,
            'text': message.text,
            'chat_id': getattr(message, 'chat_id', None),
            'reply_to_message': getattr(message, 'reply_to_message', None),
            'attaches': [{'name': getattr(attach, 'name', '–ë–ï–ó_–ò–ú–ï–ù–ò'), 'url': getattr(attach, 'url', '–ë–ï–ó_URL')} for attach in (message.attaches or [])]
        }
        print(json_module.dumps(msg_dict, indent=2, ensure_ascii=False))
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ JSON: {e}")
    
    if not args:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
        if hasattr(message, 'reply_to_message') and message.reply_to_message:
            print("üîç DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è...")
            reply_msg = message.reply_to_message
            if isinstance(reply_msg, dict):
                # reply_to_message —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                reply_attaches = reply_msg.get('attaches', [])
                if reply_attaches:
                    print("üîç DEBUG: –í –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
                    await load_from_file(api, message)
                    return
                else:
                    print("üîç DEBUG: –í –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π")
            else:
                # reply_to_message —ç—Ç–æ –æ–±—ä–µ–∫—Ç
                if hasattr(reply_msg, 'attaches') and reply_msg.attaches:
                    print("üîç DEBUG: –í –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
                    await load_from_file(api, message)
                    return
                else:
                    print("üîç DEBUG: –í –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π")
        
        response = "üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π\n\n"
        response += "üì• –°–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏:\n"
        response += f"‚Ä¢ {api.config.get('prefix', '.')}load [—Å—Å—ã–ª–∫–∞] - –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ\n"
        response += f"‚Ä¢ {api.config.get('prefix', '.')}load - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º .py\n"
        response += f"‚Ä¢ {api.config.get('prefix', '.')}load [–Ω–æ–º–µ—Ä] - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        response += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:\n"
        response += "1. –ü—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è (example_module.py)\n"
        response += "2. –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ (autoresponder.py)\n"
        response += "3. Zetta AI (zetta_ai.py)\n"
        await api.edit(message, response)
        return

    arg = args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å—Å—ã–ª–∫–æ–π
    if is_url(arg):
        await load_from_url(api, message, arg)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–æ–º
    elif arg.isdigit():
        await load_by_number(api, message, int(arg))
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª—è
        module, error = fuzzy_find_module(arg)
        if module:
            await load_by_name(api, message, module)
        else:
            await api.edit(message, f"‚ùå {error}")

def is_url(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL."""
    try:
        result = urlparse(text)
        return all([result.scheme, result.netloc])
    except:
        return False

async def load_from_url(api, message, url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ URL."""
    await api.edit(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥—É–ª—å –ø–æ —Å—Å—ã–ª–∫–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        parsed_url = urlparse(url)
        filename = Path(parsed_url.path).name
        
        # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ .py, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if not filename.endswith('.py'):
            filename += '.py'
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    content = await response.read()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    module_path = MODULES_DIR / filename
                    async with aiofiles.open(module_path, 'wb') as f:
                        await f.write(content)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
                    result = await load_module(module_path, api)
                    
                    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    if "—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω" in result:
                        response = f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                        response += f"üìÅ –§–∞–π–ª: {filename}\n"
                        response += f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {url}\n"
                        response += f"üìä –°—Ç–∞—Ç—É—Å: {result}"
                    else:
                        response = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
                        response += f"üìÅ –§–∞–π–ª: {filename}\n"
                        response += f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {url}\n"
                        response += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result}"
                    
                    await api.edit(message, response)
                else:
                    await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status}")
                    
    except Exception as e:
        await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}")

async def load_by_number(api, message, number):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
    modules_list = [
        ("example_module.py", "–ü—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è"),
        ("autoresponder.py", "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"),
        ("zetta_ai.py", "Zetta AI")
    ]
    
    if 1 <= number <= len(modules_list):
        filename, description = modules_list[number - 1]
        module_path = MODULES_DIR / filename
        
        if module_path.exists():
            await api.edit(message, f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é {description}...")
            result = await load_module(module_path, api)
            
            if "—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω" in result:
                response = f"‚úÖ {description} –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                response += f"üìÅ –§–∞–π–ª: {filename}\n"
                response += f"üìä –°—Ç–∞—Ç—É—Å: {result}"
            else:
                response = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {description}\n\n"
                response += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result}"
            
            await api.edit(message, response)
        else:
            await api.edit(message, f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ modules/")
    else:
        await api.edit(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ 1-{len(modules_list)}")

async def load_by_name(api, message, module):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –º–æ–¥—É–ª—è."""
    module_name = module['name']
    display_name = module['display_name']
    file_path = module['file_path']
    is_loaded = module['loaded']
    
    if is_loaded:
        await api.edit(message, f"‚ö†Ô∏è –ú–æ–¥—É–ª—å '{display_name}' —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return
    
    if not file_path.exists():
        await api.edit(message, f"‚ùå –§–∞–π–ª {file_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await api.edit(message, f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é {display_name}...")
    result = await load_module(file_path, api)
    
    if "—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω" in result:
        response = f"‚úÖ {display_name} –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
        response += f"üìÅ –§–∞–π–ª: {file_path.name}\n"
        response += f"üìä –°—Ç–∞—Ç—É—Å: {result}"
    else:
        response = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {display_name}\n\n"
        response += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result}"
    
    await api.edit(message, response)

async def load_from_file(api, message):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    file_name = None
    file_url = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.attaches:
        attach = message.attaches[0]
        file_name = getattr(attach, 'name', 'module.py')
        file_url = getattr(attach, 'url', None)
        print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {file_name}")
    # –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
    elif hasattr(message, 'reply_to_message') and message.reply_to_message:
        reply_msg = message.reply_to_message
        if isinstance(reply_msg, dict):
            # reply_to_message —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            reply_attaches = reply_msg.get('attaches', [])
            if reply_attaches:
                attach = reply_attaches[0]
                file_name = attach.get('name', 'module.py')
                # –í –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è token –≤–º–µ—Å—Ç–æ url
                file_token = attach.get('token', None)
                file_id = attach.get('fileId', None)
                print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (dict): {file_name}")
                print(f"   Token: {file_token}")
                print(f"   File ID: {file_id}")
                
                # –î–ª—è —Ñ–∞–π–ª–æ–≤ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
                if file_token and file_id:
                    await api.edit(message, f"‚è≥ –ü–æ–ª—É—á–∞—é URL —Ñ–∞–π–ª–∞ {file_name}...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º message_id –∏ chat_id –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    reply_message_id = reply_msg.get('id')
                    current_chat_id = getattr(message, 'chat_id', None)
                    
                    print(f"üîç DEBUG: –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:")
                    print(f"   File ID: {file_id}")
                    print(f"   Token: {file_token}")
                    print(f"   Reply Message ID: {reply_message_id}")
                    print(f"   Current Chat ID: {current_chat_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    file_url = await api.get_file_url(file_id, file_token, reply_message_id, current_chat_id)
                    if not file_url:
                        await api.edit(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ {file_name}")
                        return
                    
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL —Ñ–∞–π–ª–∞: {file_url}")
                else:
                    await api.edit(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞")
                    return
            else:
                await api.edit(message, "‚ùå –í –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
                return
        else:
            # reply_to_message —ç—Ç–æ –æ–±—ä–µ–∫—Ç
            if hasattr(reply_msg, 'attaches') and reply_msg.attaches:
                attach = reply_msg.attaches[0]
                file_name = getattr(attach, 'name', 'module.py')
                file_url = getattr(attach, 'url', None)
                print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (obj): {file_name}")
            else:
                await api.edit(message, "‚ùå –í –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
                return
    else:
        await api.edit(message, "‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
        return
    
    if not file_url:
        await api.edit(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞")
        return
    
    if not file_name.endswith('.py'):
        await api.edit(message, "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py")
        return
    
    await api.edit(message, f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥—É–ª—å `{file_name}`...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        import aiohttp
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ –∏ –≤ PyMax
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': '*/*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'cross-site',
            'Origin': 'https://web.max.ru',
            'Referer': 'https://web.max.ru/',
        }
        
        print(f"üîç DEBUG: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏...")
        print(f"   URL: {file_url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
        timeout = aiohttp.ClientTimeout(total=30, connect=10)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            try:
                async with session.get(file_url, headers=headers) as response:
                    print(f"üîç DEBUG: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status}")
                    
                    if response.status == 200:
                        content = await response.read()
                        print(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                        if len(content) == 0:
                            error_text = f"‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π\n\n"
                            error_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
                            error_text += f"üåê URL: {file_url}\n"
                            await api.edit(message, error_text)
                            return
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        module_path = MODULES_DIR / file_name
                        async with aiofiles.open(module_path, 'wb') as f:
                            await f.write(content)
                        
                        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {module_path}")
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
                        result = await load_module(module_path, api)
                        
                        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                        if "—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω" in result:
                            response_text = f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                            response_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
                            response_text += f"üìä –°—Ç–∞—Ç—É—Å: {result}"
                        else:
                            response_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
                            response_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
                            response_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result}"
                        
                        await api.edit(message, response_text)
                    else:
                        error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞\n\n"
                        error_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
                        error_text += f"üåê URL: {file_url}\n"
                        error_text += f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status}\n"
                        
                        try:
                            response_text = await response.text()
                            error_text += f"üìù –û—Ç–≤–µ—Ç: {response_text[:200]}..."
                        except:
                            error_text += f"üìù –û—Ç–≤–µ—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç"
                        
                        await api.edit(message, error_text)
                        
            except aiohttp.ClientConnectorError as e:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                error_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
                error_text += f"üåê URL: {file_url}\n"
                error_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n"
                error_text += f"üí° –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç VPN"
                
                await api.edit(message, error_text)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                
            except aiohttp.ClientTimeout as e:
                error_text = f"‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                error_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
                error_text += f"üåê URL: {file_url}\n"
                error_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
                
                await api.edit(message, error_text)
                print(f"‚ùå –¢–∞–π–º–∞—É—Ç: {e}")
                
            except Exception as e:
                error_text = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n\n"
                error_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
                error_text += f"üåê URL: {file_url}\n"
                error_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
                
                await api.edit(message, error_text)
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è\n\n"
        error_text += f"üìÅ –§–∞–π–ª: {file_name}\n"
        error_text += f"üåê URL: {file_url}\n"
        error_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        
        await api.edit(message, error_text)
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")

async def register(commands):
    commands["load"] = load_command
