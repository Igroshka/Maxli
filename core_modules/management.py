from pathlib import Path

from core.loader import load_module, unload_module, LOADED_MODULES
from core.api import MODULES_DIR
from core_modules.modules import fuzzy_find_module
import asyncio
import aiohttp
import json
from pathlib import Path
import subprocess
import sys
import time
import zipfile
import tempfile
import datetime
import os
import shutil
from core.config import CONFIG_FILE, config as core_config, save_config

async def load_command(api, message, args):
    await api.edit(message, "‚ùå –û—à–∏–±–∫–∞: —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏.\n\n–û—Ç–ø—Ä–∞–≤—å .py —Ñ–∞–π–ª –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–µ–º—É –Ω–∞–ø–∏—à–∏ .load")

async def unload_command(api, message, args):
    if not args:
        await api.edit(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ –∏–º—è/–Ω–æ–º–µ—Ä/—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è.")
        return
    query = ' '.join(args)
    module, error = fuzzy_find_module(query)
    if not module:
        await api.edit(message, f"‚ùå {error}")
        return
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª ‚Äî —Å–æ–æ–±—â–∞–µ–º
    if not module.get('loaded'):
        await api.edit(message, f"‚ùå –ú–æ–¥—É–ª—å '{module['display_name']}' –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return
    response = await unload_module(module['name'])
    await api.edit(message, f"–í—ã–≤–æ–¥:\n{response}")

async def modules_command(api, message, args):
    if not LOADED_MODULES: await api.edit(message, "üì¶ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."); return
    response = "üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n\n"
    for name, data in LOADED_MODULES.items():
        ver = data['header'].get('version', 'N/A'); dev = data['header'].get('developer', 'N/A')
        response += f"‚Ä¢ {data['header'].get('name', name)} (v{ver}) –æ—Ç {dev}\n"
    await api.edit(message, response)

async def sendmodule_command(api, message, args):
    if not args: await api.edit(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ –∏–º—è –º–æ–¥—É–ª—è."); return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª—è
    module, error = fuzzy_find_module(args[0])
    if not module:
        await api.edit(message, f"‚ùå {error}")
        return
    
    module_path = module['file_path']
    display_name = module['display_name']
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = getattr(message, 'chat_id', None)
        if not chat_id:
            await api.edit(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –º–æ–¥—É–ª—è
        await api.edit(message, f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –º–æ–¥—É–ª—è {display_name}...")
        result = await api.send_file(chat_id, str(module_path), f"–ú–æ–¥—É–ª—å {display_name}", notify=False)
        
        if result:
            await api.delete(message, for_me=False)
        else:
            await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è {display_name}")
            
    except Exception as e:
        await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")

async def register(commands):
    commands["load"] = load_command
    commands["unload"] = unload_command
    commands["modules"] = modules_command
    commands["sendmodule"] = sendmodule_command
    async def reload_command(api, message, args):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ (—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ modules)."""
        await api.edit(message, "‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π...")
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É MODULES_DIR
        MODULES_DIR.mkdir(exist_ok=True)
        results = []
        for file in MODULES_DIR.glob("*.py"):
            if file.stem == "__init__":
                continue
            module_name = file.stem
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
            if module_name.endswith("_maxli"):
                continue
            try:
                res = await load_module(file, api)
                results.append(f"{file.name}: {res}")
            except Exception as e:
                results.append(f"{file.name}: –û—à–∏–±–∫–∞ {e}")
        text = "\n".join(results) if results else "–ù–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"
        await api.edit(message, f"‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n{text}")

    commands["reload"] = reload_command
    
    async def update_command(api, message, args):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–¥—Ä–æ –∏–∑ GitHub."""
        await api.edit(message, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Maxli...")
        
        try:
            # 1) –ü–æ–ª—É—á–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π api.py (raw)
            raw_url = "https://raw.githubusercontent.com/Igroshka/Maxli/refs/heads/main/core/api.py"
            async with aiohttp.ClientSession() as session:
                async with session.get(raw_url) as resp:
                    if resp.status != 200:
                        await api.edit(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å api.py: HTTP {resp.status}")
                        return
                    remote_api = await resp.text()
            
            # 2) –ò–∑–≤–ª–µ–∫–∞–µ–º BOT_VERSION_CODE –∏–∑ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            import re
            m = re.search(r"BOT_VERSION_CODE\s*=\s*(\d+)", remote_api)
            if not m:
                await api.edit(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
                return
            remote_vc = int(m.group(1))
            local_vc = api.BOT_VERSION_CODE
            local_v = api.BOT_VERSION
            
            # 3) –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            if local_vc == remote_vc:
                await api.edit(message, f"‚ÑπÔ∏è –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: v{local_v} ({local_vc})")
                return
            if local_vc > remote_vc:
                await api.edit(message, f"‚ö†Ô∏è –£ –≤–∞—Å –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π (–∫–∞—Å—Ç–æ–º): {local_vc} > {remote_vc}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.")
                return
            
            # 4) –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥ 'yes' ‚Äî –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤)
            if not args or args[0].lower() not in ("yes", "y", "–¥–∞"):
                await api.edit(message, f"üîî –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ({remote_vc} > {local_vc}). –ó–∞–ø—É—Å—Ç–∏—Ç–µ: update yes")
                return
            
            # 5) –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ Git, –Ω–µ —Ç—Ä–æ–≥–∞—è –∫–æ–Ω—Ñ–∏–≥–∏/–º–æ–¥—É–ª–∏/—Å–µ—Å—Å–∏—é
            await api.edit(message, "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å GitHub...")
            repo_url = "https://github.com/Igroshka/Maxli.git"
            project_root = Path.cwd()
            temp_dir = project_root / "_update_tmp"
            if temp_dir.exists():
                import shutil
                shutil.rmtree(temp_dir, ignore_errors=True)
            
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É (—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
            subprocess.check_call([sys.executable, "-m", "pip", "install", "gitpython"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            from git import Repo
            Repo.clone_from(repo_url, str(temp_dir))
            
            # –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º modules/, pymax_session/, maxli_config.json)
            preserve = {"modules", "pymax_session", "maxli_config.json", ".git", ".gitignore"}
            copy_roots = ["core", "core_modules", "pymax", "main.py", "install_linux.sh", "install_windows.bat", "README.md"]
            
            import shutil
            for item in copy_roots:
                src = temp_dir / item
                dst = project_root / item
                if src.exists():
                    if src.is_dir():
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        if dst.exists():
                            shutil.rmtree(dst, ignore_errors=True)
                        shutil.copytree(src, dst)
                    else:
                        shutil.copy2(src, dst)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            shutil.rmtree(temp_dir, ignore_errors=True)
            
            # 6) –°–æ–æ–±—â–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º restart)
            await api.edit(message, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            from core_modules.restart import restart_command
            await restart_command(api, message, ["–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Maxli"])
            
        except Exception as e:
            await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    commands["update"] = update_command

    async def exportlog_command(api, message, args):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞."""
        count = 200
        if args and args[0].isdigit():
            count = max(1, min(5000, int(args[0])))
        await api.edit(message, f"‚è≥ –ì–æ—Ç–æ–≤–ª—é {count} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤...")
        try:
            lines = api.LOG_BUFFER[-count:] if hasattr(api, 'LOG_BUFFER') else []
            content = "\n".join(lines)
            ts = int(time.time())
            file_path = Path(f"log_{count}_{ts}.txt")
            file_path.write_text(content, encoding='utf-8')
            chat_id = getattr(message, 'chat_id', None) or await api.await_chat_id(message)
            if chat_id:
                await api.send_file(chat_id, str(file_path), f"–õ–æ–≥–∏ ({count} —Å—Ç—Ä–æ–∫)", notify=False)
                await api.delete(message, for_me=False)
            else:
                await api.edit(message, f"‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
        except Exception as e:
            await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")

    commands["exportlog"] = exportlog_command

    # –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
    PENDING_BACKUPS = {}

    async def backup_command(api, message, args):
        """–°–æ–∑–¥–∞—ë—Ç zip-–∞—Ä—Ö–∏–≤ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞), –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ modules/ –∏ –¥–æ–ø.—Ñ–∞–π–ª–∞–º–∏ –º–æ–¥—É–ª–µ–π (.json/.db).
        –í –∞—Ä—Ö–∏–≤ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è meta.json —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: author, date, module_count, modules
        """

    async def backup_command(api, message, args):
        """–°–æ–∑–¥–∞—ë—Ç zip-–∞—Ä—Ö–∏–≤ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞), –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ modules/ –∏ –¥–æ–ø.—Ñ–∞–π–ª–∞–º–∏ –º–æ–¥—É–ª–µ–π (.json/.db).
        –í –∞—Ä—Ö–∏–≤ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è meta.json —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: author, date, module_count, modules
        """
        snippet = getattr(message, 'text', '')
        api.LOG_BUFFER.append(f"[backup] {snippet[:80]}")
        api.LOG_BUFFER.append(f"[backup-full] {getattr(message, 'text', '')}")
        await api.edit(message, "‚è≥ –ì–æ—Ç–æ–≤–ª—é –±—ç–∫–∞–ø...")
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            ts = int(time.time())
            tmp_name = f"backup_{ts}.zip"
            tmp_path = Path(tmp_name)

            def make_backup():
                # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ phone –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                conf_copy = dict(core_config)
                conf_copy.pop('phone', None)
                config_tmp_path = Path("maxli_config.json")
                with open(config_tmp_path, 'w', encoding='utf-8') as f:
                    json.dump(conf_copy, f, ensure_ascii=False, indent=2)
                with zipfile.ZipFile(tmp_path, 'w', zipfile.ZIP_DEFLATED) as z:
                    # 1) –¥–æ–±–∞–≤–ª—è–µ–º maxli_config.json
                    z.write(config_tmp_path, 'maxli_config.json')
                    # 2) –º–æ–¥—É–ª–∏ –∏ –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ MODULES_DIR
                    MODULES_DIR.mkdir(exist_ok=True)
                    modules = []
                    for p in MODULES_DIR.rglob('*'):
                        if p.is_file():
                            arcname = os.path.join('modules', os.path.relpath(p, MODULES_DIR))
                            z.write(p, arcname)
                            modules.append(str(p.name))
                    # 3) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã - –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ session
                    meta = {
                        'author': getattr(api.me, 'names', None) and api.me.names[0].name or str(getattr(message, 'sender', 'unknown')),
                        'date': datetime.datetime.utcnow().isoformat() + 'Z',
                        'module_count': len(modules),
                        'modules': modules,
                    }
                    z.writestr('meta.json', json.dumps(meta, ensure_ascii=False, indent=2))
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π maxli_config.json
                try:
                    config_tmp_path.unlink()
                except Exception:
                    pass
            await asyncio.to_thread(make_backup)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            chat_id = getattr(message, 'chat_id', None) or await api.await_chat_id(message)
            if chat_id:
                await api.send_file(chat_id, str(tmp_path), f"Backup {ts}", notify=False)
                await api.delete(message, for_me=False)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                tmp_path.unlink()
            except Exception:
                pass

        except Exception as e:
            err_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e} | –°–æ–æ–±—â–µ–Ω–∏–µ: {getattr(message, 'text', '')}"
            try:
                from core.api import _append_log
                _append_log(err_text)
            except Exception:
                api.LOG_BUFFER.append(err_text)
            await api.edit(message, err_text)

    commands['backup'] = backup_command

    async def loadbackup_command(api, message, args):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç zip-–±–µ–∫–∞–ø –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç meta.json –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.
        –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: loadbackup apply <id>
        """
        # 2 —Ä–µ–∂–∏–º–∞: –µ—Å–ª–∏ –µ—Å—Ç—å args and args[0]=='apply' ‚Äî –ø—Ä–∏–º–µ–Ω—è—Ç—å; –∏–Ω–∞—á–µ ‚Äî —Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π zip –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—É
        if args and args[0].lower() == 'apply':
            # apply pending
            key = args[1] if len(args) > 1 else None
            if not PENDING_BACKUPS:
                await api.edit(message, "‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")
                return
            if key is None:
                if len(PENDING_BACKUPS) == 1:
                    key = next(iter(PENDING_BACKUPS.keys()))
                else:
                    await api.edit(message, f"‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ id –±—ç–∫–∞–ø–∞. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(PENDING_BACKUPS.keys())}")
                    return

            info = PENDING_BACKUPS.get(key)
            if not info:
                await api.edit(message, f"‚ùå –ë—ç–∫–∞–ø {key} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.")
                return

            await api.edit(message, f"‚è≥ –ü—Ä–∏–º–µ–Ω—è—é –±—ç–∫–∞–ø {key} ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")

            def apply_backup():
                tmp_zip = info['path']
                extract_dir = Path(tempfile.mkdtemp(prefix='maxli_backup_'))
                try:
                    with zipfile.ZipFile(tmp_zip, 'r') as z:
                        z.extractall(extract_dir)

                    # 1) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º phone)
                    cfg_path = extract_dir / 'maxli_config.json'
                    if cfg_path.exists():
                        with open(cfg_path, 'r', encoding='utf-8') as f:
                            new_conf = json.load(f)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–µ—Å—Å–∏—é
                        current_phone = core_config.config.get('phone')
                        new_conf['phone'] = current_phone
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–∞–π–ª
                        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                            json.dump(new_conf, f, indent=4, ensure_ascii=False)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
                        core_config.config = new_conf

                    # 2) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π: –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ extracted modules/ -> MODULES_DIR
                    src_modules = extract_dir / 'modules'
                    if src_modules.exists():
                        MODULES_DIR.mkdir(exist_ok=True)
                        for root, dirs, files in os.walk(src_modules):
                            rel = os.path.relpath(root, src_modules)
                            for fn in files:
                                srcf = Path(root) / fn
                                if rel == '.':
                                    dest = MODULES_DIR / fn
                                else:
                                    dest_dir = MODULES_DIR / rel
                                    dest_dir.mkdir(parents=True, exist_ok=True)
                                    dest = dest_dir / fn
                                shutil.copy2(srcf, dest)

                    return True, None
                except Exception as e:
                    return False, str(e)
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ—á–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    try:
                        shutil.rmtree(extract_dir)
                    except Exception:
                        pass

            ok, err = await asyncio.to_thread(apply_backup)
            # –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è ‚Äî —É–¥–∞–ª—è–µ–º pending –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π zip
            try:
                Path(info['path']).unlink()
            except Exception:
                pass
            del PENDING_BACKUPS[key]

            if not ok:
                await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {err}")
                return

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏
            MODULES_DIR.mkdir(exist_ok=True)
            results = []
            for file in MODULES_DIR.glob("*.py"):
                if file.stem == "__init__":
                    continue
                try:
                    res = await load_module(file, api)
                    results.append(f"{file.name}: {res}")
                except Exception as e:
                    results.append(f"{file.name}: –û—à–∏–±–∫–∞ {e}")

            await api.edit(message, f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π:\n{"\n".join(results)}")
            return

        # –ò–Ω–∞—á–µ ‚Äî –æ–∂–∏–¥–∞–µ–º zip –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏
        attach = getattr(message, 'attaches', None)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç attach, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not attach:
            # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id = getattr(message, 'chat_id', None)
            if not chat_id:
                chat_id = await api.await_chat_id(message)
            
            if chat_id and hasattr(message, 'reply_to_message') and message.reply_to_message:
                # –ï—Å–ª–∏ –µ—Å—Ç—å reply_to_message, –∏—â–µ–º —Ñ–∞–π–ª –≤ –Ω–µ–º
                reply_msg = message.reply_to_message
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message: {reply_msg}")
                if reply_msg and hasattr(reply_msg, 'attaches') and reply_msg.attaches:
                    attach = reply_msg.attaches
                    print(f"üîç –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(attach)} –≤–ª–æ–∂–µ–Ω–∏–π")
                else:
                    print(f"üîç –í reply_to_message –Ω–µ—Ç attaches: {hasattr(reply_msg, 'attaches') if reply_msg else 'None'}")
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –≤ —á–∞—Ç–µ
                try:
                    # –ò—â–µ–º –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –∏ —á–∞—Ç–∞—Ö
                    all_convs = api.client.dialogs + api.client.chats
                    target_chat = None
                    for conv in all_convs:
                        if conv.id == chat_id:
                            target_chat = conv
                            break
                    
                    if target_chat and target_chat.last_message:
                        last_msg = target_chat.last_message
                        if hasattr(last_msg, 'attaches') and last_msg.attaches:
                            attach = last_msg.attaches
                            print(f"üîç –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–∞—Ç–∞: {len(attach)} –≤–ª–æ–∂–µ–Ω–∏–π")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç–µ: {e}")
        
        if not attach:
            await api.edit(message, "‚ö†Ô∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ zip-—Ñ–∞–π–ª —Å –±—ç–∫–∞–ø–æ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –∏ –≤—ã–∑–æ–≤–∏—Ç–µ loadbackup.")
            return

        try:
            attach0 = attach[0]
            url = getattr(attach0, 'url', None)
            name = getattr(attach0, 'name', 'backup.zip')
            if not url or not name.lower().endswith('.zip'):
                await api.edit(message, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –Ω–µ zip-—Ñ–∞–π–ª –∏–ª–∏ –Ω–µ—Ç URL.")
                return

            await api.edit(message, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –±—ç–∫–∞–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")

            tmpf = Path(tempfile.mktemp(suffix='.zip'))

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        await api.edit(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: HTTP {resp.status}")
                        return
                    data = await resp.read()
                    tmpf.write_bytes(data)

            # –ü—Ä–æ—á–∏—Ç–∞–µ–º meta.json
            try:
                with zipfile.ZipFile(tmpf, 'r') as z:
                    if 'meta.json' not in z.namelist():
                        await api.edit(message, "‚ùå –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç meta.json ‚Äî —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π –±—ç–∫–∞–ø.")
                        tmpf.unlink(missing_ok=True)
                        return
                    meta = json.loads(z.read('meta.json').decode('utf-8'))
            except Exception as e:
                await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
                tmpf.unlink(missing_ok=True)
                return

            # –°–æ—Ö—Ä–∞–Ω–∏–º pending
            b_id = f"b{int(time.time())}"
            PENDING_BACKUPS[b_id] = {'path': str(tmpf), 'meta': meta, 'uploader': getattr(message, 'sender', None)}

            info_text = f"üóÇ –ë—ç–∫–∞–ø –ø—Ä–∏–Ω—è—Ç: id={b_id}\n–ê–≤—Ç–æ—Ä: {meta.get('author')}\n–î–∞—Ç–∞: {meta.get('date')}\n–ú–æ–¥—É–ª–µ–π: {meta.get('module_count')}\n\n–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: loadbackup apply {b_id}"
            await api.edit(message, info_text)

        except Exception as e:
            await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")

    commands['loadbackup'] = loadbackup_command